{"file":"soul-table-wrapper.entry.js","mappings":"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","names":[],"sources":["./src/components/soul-table-wrapper/soul-table-wrapper.scss?tag=soul-table-wrapper&encapsulation=shadow","./src/components/soul-table-wrapper/soul-table-wrapper.tsx"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n  height: 100%;\n  overflow-y: auto;\n}\n","import {Component, ComponentInterface, Element, Event, EventEmitter, h, Host, Prop, Watch} from '@stencil/core';\n\n@Component({\n  tag: 'soul-table-wrapper',\n  styleUrl: 'soul-table-wrapper.scss',\n  shadow: true,\n})\nexport class SoulTableWrapper implements ComponentInterface {\n\n  @Prop({reflect: true}) public xs: number;\n  @Prop({reflect: true}) public s: number;\n  @Prop({reflect: true}) public m: number;\n  @Prop({reflect: true}) public l: number;\n  @Prop({reflect: true}) public xl: number;\n\n  @Event() public soulTableSizeChange: EventEmitter<'xs' | 's' | 'm' | 'l' | 'xl'>;\n  @Event() public soulTableFullSize: EventEmitter<void>;\n\n  @Element() private hostElement: HTMLElement;\n  private resizeObserver: ResizeObserver;\n  private currentSize: TableSizes;\n  private breakpoints: TableBreakpoint[] = [];\n  private tableSlot: HTMLSlotElement;\n\n\n  componentDidLoad() {\n    this.setBreakpoints();\n    this.resizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) => this.checkSize(entries[0].contentRect.width));\n    this.resizeObserver.observe(this.hostElement);\n  }\n\n  public disconnectedCallback() {\n    this.resizeObserver.disconnect();\n  }\n\n  @Watch('xs')\n  @Watch('s')\n  @Watch('m')\n  @Watch('l')\n  @Watch('xl')\n  public onChange(): void {\n    this.setBreakpoints();\n    this.checkSize(this.hostElement.clientWidth);\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot ref={el => this.tableSlot = el as HTMLSlotElement}></slot>\n      </Host>\n    );\n  }\n\n  private setBreakpoints(): void {\n    const breakpointsKeys: TableBreakpointKeys[] = this.getBreakpointsKeys();\n    this.breakpoints = this.buildDescendingOrderBreakpoints(breakpointsKeys);\n  }\n\n  private buildDescendingOrderBreakpoints(breakpointKeys: TableBreakpointKeys[]): TableBreakpoint[] {\n    return [this.xs, this.s, this.m, this.l, this.xl]\n      .map((width: number, index: number) => ({size: breakpointKeys[index], width}))\n      .filter(size => !Number.isNaN(size.width))\n      .reverse();\n  }\n\n  private checkSize(width: number): void {\n    const newSize: TableSizes = this.breakpoints\n      .reduce((currentSize: TableBreakpointKeys, breakpoint: TableBreakpoint) =>\n        (width <= breakpoint.width) ? breakpoint.size : currentSize, 'full');\n\n    this.updateSizeClass(newSize);\n  }\n\n  private updateSizeClass(newSize: TableSizes): void {\n    if (newSize !== this.currentSize) {\n      this.removeSizeClass(this.currentSize);\n      this.currentSize = newSize;\n      if (this.isBreakpointKey(newSize)) {\n        this.addSizeClass(newSize);\n        this.soulTableSizeChange.emit(newSize);\n      } else {\n        this.soulTableFullSize.emit();\n      }\n    }\n  }\n\n  private addSizeClass(toAdd: TableBreakpointKeys): void {\n    this.tableSlot.assignedElements().forEach(slotted => slotted.classList.add(this.getClassForSize(toAdd)));\n  }\n\n  private removeSizeClass(toRemove: TableSizes): void {\n    if (this.isBreakpointKey(toRemove)) {\n      this.tableSlot.assignedElements().forEach(slotted => slotted.classList.remove(this.getClassForSize(toRemove)));\n    }\n  }\n\n  private getBreakpointsKeys(): TableBreakpointKeys[] {\n    return ['xs', 's', 'm', 'l', 'xl'];\n  }\n\n  private getClassForSize(breakpointKey: TableBreakpointKeys): string {\n    return 'soul-table--' + breakpointKey;\n  }\n\n  private isBreakpointKey(newSize: TableSizes): newSize is TableBreakpointKeys {\n    return this.getBreakpointsKeys().some(key => key === newSize);\n  }\n}\n\ninterface TableBreakpoint {\n  size: TableBreakpointKeys;\n  width: number;\n}\n\ntype TableSizes = 'xs' | 's' | 'm' | 'l' | 'xl' | 'full';\ntype TableBreakpointKeys = Exclude<TableSizes, 'full'>;\n\n"],"version":3}