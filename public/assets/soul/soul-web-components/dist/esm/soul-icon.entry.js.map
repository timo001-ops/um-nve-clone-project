{"file":"soul-icon.entry.js","mappings":";;;;;AAAA,MAAM,WAAW,GAAG,wtDAAwtD;;MCW/tD,QAAQ;;;IASX,mBAAc,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACrE,oBAAe,GAAG,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;IAEtD,eAAU,GAAE,IAAI,UAAU,EAAE,CAAC;;gBATmD,GAAG;kBAClD,KAAK;;;;EAavC,UAAU;IACf,IAAI,CAAC,UAAU,EAAE,CAAC;GACnB;EAGM,UAAU,CAAC,QAAgB;IAChC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;GAC7D;EAGM,WAAW,CAAC,QAAgB;IACjC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;GAC/B;EAED,MAAM;IACJ,QACE,EAAC,IAAI,QACH,WAAK,KAAK,EAAC,iBAAiB,EAAC,KAAK,EAAE,EAAC,kBAAkB,EAAE,IAAI,CAAC,OAAO,EAAC,GAAQ,CACzE,EACP;GACH;EAED,iBAAiB;IACf,IAAI,CAAC,YAAY,GAAG,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtD,IAAI,CAAC,UAAU,EAAE,CAAC;GACnB;EAEO,UAAU;;IAChB,MAAM,WAAW,GAAG,MAAA,IAAI,CAAC,IAAI,0CAAE,IAAI,EAAE,CAAC;IACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,GAAG,OAAO,IAAI,CAAC,YAAY,IAAI,WAAW,GAAG,GAAG,OAAO,IAAI,CAAC,YAAY,gCAAgC,WAAW,GAAG,CAAC;GACxJ;EAEO,cAAc,CAAC,QAAgB;IACrC,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;MACtE,OAAO,CAAC,KAAK,CAAC,SAAS,QAAQ,qCAAqC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;KAChK;GACF;;;;;;;;;;;;","names":[],"sources":["./src/components/soul-icon/soul-icon.scss?tag=soul-icon&encapsulation=shadow","./src/components/soul-icon/soul-icon.tsx"],"sourcesContent":["@use \"modules/core\";\n\n$_icon-sizes: (\n  core.$soul-2-xs,\n  core.$soul-xs,\n  core.$soul-s,\n  core.$soul-m,\n  core.$soul-l,\n  core.$soul-xl,\n  core.$soul-2-xl,\n  core.$soul-3-xl\n);\n\n@each $size in $_icon-sizes {\n  :host([size=\"#{$size}\"]) {\n    --soul-icon-size: #{core.get-font-size($size)};\n  }\n}\n\n@mixin _soul-icon() {\n  content: '';\n  mask-image: var(--_soul-icon-url);\n  background: var(--soul-icon-color);\n  mask-repeat: no-repeat;\n  mask-position: center;\n  display: block;\n  width: var(--soul-icon-size);\n  height: var(--soul-icon-size);\n}\n\n:host {\n  --soul-icon-color: currentColor;\n  --soul-icon-size: #{core.get-font-size(core.$soul-s)};\n}\n\n:host,\n.soul-icon__icon {\n  width: var(--soul-icon-size);\n  height: var(--soul-icon-size);\n}\n\n.soul-icon__icon {\n  --_soul-icon-name: '';\n\n  &:before {\n    @include _soul-icon();\n  }\n}\n\n:host([inline]),\n:host([inline=\"true\"]) {\n  display: inline-block;\n}\n\n:host,\n:host([inline=\"false\"]),\n.soul-icon__icon {\n  display: flex;\n}\n\n:host([color=\"reduced\"]) {\n  --soul-icon-color: #{core.$soul-color-icon-reduced};\n}\n\n:host([color=\"secondary\"]) {\n  --soul-icon-color: #{core.$soul-color-icon-secondary};\n}\n\n:host([color=\"primary\"]) {\n  --soul-icon-color: #{core.$soul-color-icon-primary};\n}\n\n","import {Component, ComponentWillLoad, Element, h, Host, Prop, Watch} from '@stencil/core';\nimport {HostElement} from '@stencil/core/internal';\nimport {getAssetsFolder} from '../../services/AssetsFolderHelper';\nimport {isNotEmpty} from '../../utils/utils';\nimport {SizeHelper} from '../../services/SizeHelper';\n\n@Component({\n  tag: 'soul-icon',\n  styleUrl: 'soul-icon.scss',\n  shadow: true,\n})\nexport class SoulIcon implements ComponentWillLoad {\n\n  @Prop({reflect: true}) name: string;\n  @Prop({reflect: true}) size: '2-xs' | 'xs' | 's' | 'm' | 'l' | 'xl' | '2-xl' | '3-xl' = 's';\n  @Prop({reflect: true}) inline: boolean = false;\n  @Prop({reflect: true}) color: 'primary' | 'secondary' | 'reduced';\n  @Prop({reflect: true}) iconStackUrl: string;\n  @Element() hostElement: HostElement;\n\n  private supportedSizes = ['2-xs', 'xs', 's', 'm', 'l', 'xl', '2-xl', '3-xl'];\n  private supportedColors = ['primary', 'secondary', 'reduced'];\n\n  private sizeHelper= new SizeHelper();\n  private assetsFolder: string;\n  private iconUrl: string;\n\n  @Watch('name')\n  public nameChange(): void {\n    this.setIconUrl();\n  }\n\n  @Watch('size')\n  public sizeChange(newValue: string): void {\n    this.sizeHelper.validateSize(this.supportedSizes, newValue);\n  }\n\n  @Watch('color')\n  public colorChange(newValue: string): void {\n    this.validateColors(newValue);\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class='soul-icon__icon' style={{'--_soul-icon-url': this.iconUrl}}></div>\n      </Host>\n    );\n  }\n\n  componentWillLoad(): Promise<void> | void {\n    this.assetsFolder = getAssetsFolder(this.hostElement);\n    this.setIconUrl();\n  }\n\n  private setIconUrl(): void {\n    const nameTrimmed = this.name?.trim();\n    this.iconUrl = this.iconStackUrl ? `url(${this.iconStackUrl}#${nameTrimmed})` : `url(${this.assetsFolder}/sprite/core-icons.stack.svg#${nameTrimmed})`;\n  }\n\n  private validateColors(newValue: string): void {\n    if (isNotEmpty(this.color) && !this.supportedColors.includes(newValue)) {\n      console.debug(`Color ${newValue} not supported. Supported colors: ${this.supportedColors.join(', ')}. You can use --soul-icon-color to customize icon color.`);\n    }\n  }\n\n}\n"],"version":3}