{"version":3,"file":"OptionHelper.js","sourceRoot":"","sources":["../../../../../../src/services/OptionHelper.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,YAAY;EAIvB,YAAoB,gBAA4B,EAAU,KAAwB;IAA9D,qBAAgB,GAAhB,gBAAgB,CAAY;IAAU,UAAK,GAAL,KAAK,CAAmB;IAChF,IAAI,CAAC,YAAY,GAAG,IAAI,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;EAC7D,CAAC;EAEM,iBAAiB;IACtB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,WAAW,EAAE,EAAE;MACtD,OAAO,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;QAC9E,MAAM,UAAU,GAAG,cAAc,CAAC,SAAS,CAAC,IAAI,CAAgB,CAAC;QACjE,UAAU,CAAC,YAAY,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;QAClD,OAAO,UAAU,CAAC;MACpB,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,EAAE,EAAmB,CAAC,CAAC;EAC1B,CAAC;EAEM,cAAc,CAAC,QAAiB;IACrC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;IAC/B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;MACxB,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MACtE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IACH,IAAI,QAAQ,EAAE;MACZ,IAAI,CAAC,mBAAmB,EAAE,CAAC;MAC3B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACxB,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACnE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;MAC9D,CAAC,CAAC,CAAC;KACJ;EACH,CAAC;EAEM,UAAU;IACf,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;EACjC,CAAC;EAEO,mBAAmB;IACzB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE;OAC/C,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,EAAE;MACrE,SAAS,EAAE,IAAI;MACf,OAAO,EAAE,IAAI;MACb,UAAU,EAAE,IAAI;MAChB,aAAa,EAAE,IAAI;KACpB,CAAC,CAAC,CAAC,CAAC;EACT,CAAC;EAEO,YAAY;IAClB,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;IAC/B,IAAI,CAAC,mBAAmB,EAAE,CAAC;EAC7B,CAAC;CAEF","sourcesContent":["export class OptionHelper {\n\n  private slotObserver: MutationObserver;\n\n  constructor(private onSelectedChange: () => void, private slots: HTMLSlotElement[]) {\n    this.slotObserver = new MutationObserver(onSelectedChange);\n  }\n\n  public cloneSlotsContent(): HTMLElement[] {\n    return this.slots.reduce((previousValue, currentSlot) => {\n      return previousValue.concat(currentSlot.assignedElements().map(elementToClone => {\n        const clonedNode = elementToClone.cloneNode(true) as HTMLElement;\n        clonedNode.setAttribute('slot', currentSlot.name);\n        return clonedNode;\n      }));\n    }, [] as HTMLElement[]);\n  }\n\n  public onSelectChange(selected: boolean): void {\n    this.slotObserver.disconnect();\n    this.slots.forEach(slot => {\n      slot?.removeEventListener('slotchange', this.onSlotChange.bind(this));\n      slot?.removeEventListener('slotchange', this.onSelectedChange);\n    });\n    if (selected) {\n      this.observeSlotElements();\n      this.slots.forEach(slot => {\n        slot?.addEventListener('slotchange', this.onSlotChange.bind(this));\n        slot?.addEventListener('slotchange', this.onSelectedChange);\n      });\n    }\n  }\n\n  public disconnect() {\n    this.slotObserver.disconnect();\n  }\n\n  private observeSlotElements() {\n    this.slots.forEach(slot => slot.assignedElements()\n      .forEach((slottedElement) => this.slotObserver.observe(slottedElement, {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true\n      })));\n  }\n\n  private onSlotChange() {\n    this.slotObserver.disconnect();\n    this.observeSlotElements();\n  }\n\n}\n"]}