{"version":3,"file":"soul-benefit-modal.js","sourceRoot":"","sources":["../../../../../../../src/components/soul-benefit-modal/soul-benefit-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Event, EventEmitter, h, Method, Prop, Watch } from '@stencil/core';\nimport {isNotNull} from '../../utils/utils';\n\n@Component({\n  tag: 'soul-benefit-modal',\n  styleUrl: 'soul-benefit-modal.scss',\n  shadow: false\n})\nexport class SoulBenefitModal {\n\n  @Prop({ mutable: true, reflect: true }) public open: boolean = false;\n  @Prop({ reflect: true }) public closeWithEsc: boolean = true;\n  @Prop({ reflect: true }) public closeButton: boolean = false;\n  @Prop({ reflect: true }) public heading: string;\n  @Prop({ reflect: true }) public description: string;\n\n  @Event() public soulClose: EventEmitter<void>;\n\n  private dialog!: HTMLDialogElement;\n  private readonly CLOSING_ANIMATION_CLASS = 'soul-benefit-modal--closing';\n\n  @Method()\n  public async show() {\n    this.open = true;\n  }\n\n  @Method()\n  public async close() {\n    this.open = false;\n  }\n\n  componentDidLoad(): void {\n    this.addCancelListener();\n    if (this.open) {\n      this.dialog.showModal();\n    }\n  }\n\n  render() {\n    return (\n      <dialog class=\"soul-benefit-modal\" onClose={() => this.emitCloseEvent()} ref={el => this.dialog = el as HTMLDialogElement}>\n        <div class=\"soul-grid soul-grid--vertical\">\n          {this.closeButton ?\n            <div class=\"soul-benefit-modal__close\">\n              <button onClick={() => {\n                this.close();\n              }} class=\"soul-button soul-button--default soul-button--compact soul-button--icon-only\">\n                <span class=\"soul-button__icon\"><span class=\"a-icon a-icon--close\"></span></span>\n              </button>\n            </div> :\n            ''\n          }\n          <div class=\"soul-benefit-modal__media soul-grid-item-auto-span\">\n            <slot name=\"media\"></slot>\n          </div>\n          {isNotNull(this.heading) || isNotNull(this.description) ?\n            <header class=\"soul-benefit-modal__header soul-grid-item-auto-span\">\n              {isNotNull(this.heading) ?\n                <div class=\"soul-benefit-modal__header-title\">\n                  <h1 class=\"soul-heading soul-heading--h4\">{this.heading}</h1>\n                </div> :\n                ''\n              }\n              {isNotNull(this.description) ?\n                <div class=\"soul-benefit-modal__header-description\">\n                  <p>{this.description}</p>\n                </div> :\n                ''\n              }\n            </header> :\n            ''\n          }\n          <section class=\"soul-benefit-modal__content soul-grid-item-fill-span  h-y-auto-scroll\">\n            <slot name=\"content\"></slot>\n          </section>\n          <footer class=\"soul-benefit-modal__buttons  soul-grid-item-auto-span soul-button-group  soul-button-group--no-wrap\">\n            <slot name=\"buttons\"></slot>\n          </footer>\n        </div>\n      </dialog>\n    );\n  }\n\n  @Watch('open')\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore : method is declared but never used\n  private toggleDialog(): void {\n    this.open ? this.dialog?.showModal() : this.animateClose(); //TODO check as any. Typescript types error.\n  }\n\n  private emitCloseEvent(): void {\n    this.soulClose.emit();\n  }\n\n  private addCancelListener(): void {\n    this.dialog.addEventListener('cancel', (event: Event) => {\n      event.preventDefault();\n\n      if (this.closeWithEsc) {\n        this.close();\n      }\n    });\n  }\n\n  private animateClose(): void {\n    this.dialog.classList.add(this.CLOSING_ANIMATION_CLASS);\n    this.dialog.addEventListener('animationend', () => {\n      this.dialog.close();\n      this.dialog.classList.remove(this.CLOSING_ANIMATION_CLASS);\n    }, { once: true })\n  }\n}\n"]}