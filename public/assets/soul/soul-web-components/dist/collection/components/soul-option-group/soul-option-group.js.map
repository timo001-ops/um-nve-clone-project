{"version":3,"file":"soul-option-group.js","sourceRoot":"","sources":["../../../../../../../src/components/soul-option-group/soul-option-group.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAuC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,MAAM,eAAe,CAAC;AAC5G,OAAO,EAAC,YAAY,EAAC,MAAM,6BAA6B,CAAC;AAOzD,MAAM,OAAO,eAAe;;;;;;EAW1B,iBAAiB;IACf,IAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,GAAG,EAAE;MAChD,MAAM,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC;MAEtI,IAAI,kBAAkB,EAAE;QACtB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,YAAY,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;OACtE;WAAM;QACL,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;OACjE;IACH,CAAC,CAAC,CAAC;EACL,CAAC;EAED,gBAAgB;IACd,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACzB,IAAI,CAAC,eAAe,EAAE,CAAC;EACzB,CAAC;EAGM,iBAAiB;IACtB,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;MACtD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAE,MAAqB,CAAC,YAAY,CAAC,YAAY,CAAC,wBAAwB,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAE,MAAqB,CAAC,eAAe,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;IACjM,CAAC,CAAC,CAAC;EACL,CAAC;EAGM,eAAe;IACpB,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;MACtD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAE,MAAqB,CAAC,YAAY,CAAC,YAAY,CAAC,sBAAsB,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAE,MAAqB,CAAC,eAAe,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;IACzL,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAC,mBAAmB;QAC5B,YAAM,KAAK,EAAC,wDAAwD,IAAE,IAAI,CAAC,KAAK,CAAQ;QACxF,WAAK,KAAK,EAAC,4BAA4B;UACrC,YAAM,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,GAAG,EAAqB,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAS,CAC9G,CACF,CACD,CACR,CAAC;EACJ,CAAC;EAEO,aAAa;IACnB,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC;IACnC,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;MACtD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,EAAE,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;EAEL,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEF","sourcesContent":["import {Component, ComponentDidLoad, ComponentWillLoad, Element, h, Host, Prop, Watch} from '@stencil/core';\nimport {SelectHelper} from '../../services/SelectHelper';\n\n@Component({\n  tag: 'soul-option-group',\n  styleUrl: 'soul-option-group.scss',\n  shadow: true,\n})\nexport class SoulOptionGroup implements ComponentDidLoad, ComponentWillLoad {\n\n  @Prop({reflect: true}) label: string;\n  @Prop({reflect: true}) disabled?: boolean;\n  @Prop({reflect: true}) hidden?: boolean;\n\n  @Element() hostElement: HTMLElement;\n\n  private optionsElement: HTMLSlotElement;\n  private mutationObserver: MutationObserver;\n\n  componentWillLoad(): Promise<void> | void {\n    this.mutationObserver = new MutationObserver(() => {\n      const areOptionsFiltered = this.optionsElement.assignedElements().every(option => option.hasAttribute(SelectHelper.FILTER_ATTRIBUTE));\n\n      if (areOptionsFiltered) {\n        this.hostElement.setAttribute(SelectHelper.FILTER_ATTRIBUTE, 'true');\n      } else {\n        this.hostElement.removeAttribute(SelectHelper.FILTER_ATTRIBUTE);\n      }\n    });\n  }\n\n  componentDidLoad(): void {\n    this.onDisabledChanged();\n    this.onHiddenChanged();\n  }\n\n  @Watch('disabled')\n  public onDisabledChanged(): void {\n    this.optionsElement.assignedElements().forEach(option => {\n      this.disabled ? (option as SoulOption).setAttribute(SelectHelper.GROUP_DISABLED_ATTRIBUTE, `${this.disabled}`) : (option as SoulOption).removeAttribute(SelectHelper.GROUP_DISABLED_ATTRIBUTE);\n    });\n  }\n\n  @Watch('hidden')\n  public onHiddenChanged(): void {\n    this.optionsElement.assignedElements().forEach(option => {\n      this.hidden ? (option as SoulOption).setAttribute(SelectHelper.GROUP_HIDDEN_ATTRIBUTE, `${this.hidden}`) : (option as SoulOption).removeAttribute(SelectHelper.GROUP_HIDDEN_ATTRIBUTE);\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"soul-option-group\">\n          <span class=\"soul-option-group__label soul-label soul-label--strong\">{this.label}</span>\n          <div class=\"soul-option-group__options\">\n            <slot ref={el => this.optionsElement = el as HTMLSlotElement} onSlotchange={this.onSlotChanged.bind(this)}></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  private onSlotChanged(): void {\n    this.mutationObserver.disconnect();\n    this.optionsElement.assignedElements().forEach(option => {\n      this.mutationObserver.observe(option, {attributes: true});\n    });\n\n  }\n\n}\n\ntype SoulOption = HTMLSoulTextOptionElement | HTMLSoulAvatarOptionElement;\n"]}