{"version":3,"file":"soul-markdown-content.component.js","sourceRoot":"","sources":["../../../../../../../src/components/soul-markdown-display/soul-markdown-content.component.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, ComponentInterface, Event, EventEmitter, h, Host, Prop, State, Watch} from '@stencil/core';\nimport {Converter} from 'showdown';\nimport {isDefined, isNotEmpty} from '../../utils/utils';\nimport DOMPurify from 'dompurify';\n\n@Component({\n  tag: 'soul-markdown-content',\n  styleUrl: 'soul-markdown-content.scss',\n  shadow: false,\n})\nexport class SoulMarkdownContent implements ComponentInterface {\n\n  @Prop({reflect: true}) public url: string;\n  @Prop({reflect: false}) public value: string;\n  @Prop({reflect: true}) public scale: 's' | 'm' | 'l' = 's';\n  @Prop({reflect: true}) public trustContent = false;\n\n  @Event() public soulMarkdownConverted: EventEmitter<string>;\n\n  @State()\n  private convertedValue: string;\n  private converter: Converter;\n\n  constructor() {\n    this.converter = new Converter();\n    this.converter.setOption('strikethrough', 'true');\n    this.converter.setOption('tables', 'true');\n    this.converter.setOption('tasklists', 'true');\n    this.converter.setOption('simplifiedAutoLink', 'true');\n  }\n\n  @Watch('url')\n  @Watch('value')\n  @Watch('trustContent')\n  public onDisabledChange() {\n    this.updateInnerHTML();\n  }\n\n  public componentWillLoad(): Promise<void> | void {\n    this.updateInnerHTML();\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{\n          'soul-content': true,\n          [`soul-font-scale-${this.scale}`]: true,\n          'h-y-auto-scroll': true,\n        }} innerHTML={isDefined(this.convertedValue) ? this.convertedValue : ''}>\n        </div>\n      </Host>\n    );\n  }\n\n  private updateInnerHTML(): void {\n    if (isNotEmpty(this.url)) {\n      fetch(this.url)\n        .then((response) => {\n          if (response.ok) {\n            return response.text();\n          }\n          throw new Error(response.statusText);\n        })\n        .then((text) => {\n          this.convertedValue = this.convertMarkdownToHTML(text);\n          this.soulMarkdownConverted.emit(this.convertedValue);\n        })\n        .catch(() => {\n          this.convertedValue = '';\n        });\n    } else if (isNotEmpty(this.value)) {\n      this.convertedValue = this.convertMarkdownToHTML(this.value);\n      this.soulMarkdownConverted.emit(this.convertedValue);\n    } else {\n      this.convertedValue = '';\n    }\n  }\n\n  private convertMarkdownToHTML(markdown: string): string {\n    const html = this.converter.makeHtml(markdown);\n    return this.trustContent ? html : DOMPurify.sanitize(html);\n  }\n\n}\n"]}