{"version":3,"file":"IconMap.js","sourceRoot":"","sources":["../../../../../../../src/components/soul-file-icon/IconMap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAC,MAAM,mBAAmB,CAAC;AAC5C,OAAO,OAAO,MAAM,wDAAwD,CAAC;AAC7E,MAAa,OAAO;EAMlB,YAAY,YAAoB;IAC9B,IAAI,CAAC,cAAc,GAAG,GAAG,YAAY,+BAA+B,CAAC;EACvE,CAAC;EAEM,WAAW,CAAC,IAAY;IAC7B,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;EAC5F,CAAC;EAGO,kBAAkB,CAAC,SAAiB;IAC1C,IAAG,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,MAAM,CAAC,CAAC,CAAC,MAAK,GAAG,EAAC;MAC9B,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;KAC7B;IACD,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7G,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;MACnB,OAAO,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;KAClD;EACH,CAAC;EAEO,aAAa,CAAC,QAAgB;IACpC,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAK,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW,EAAE,CAAA,CAAC,CAAC;IAC9G,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;MACnB,OAAO,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;KAClD;EACH,CAAC;EAEO,cAAc;IACpB,OAAO,GAAG,IAAI,CAAC,cAAc,IAAI,OAAO,CAAC,YAAY,EAAE,CAAC;EAC1D,CAAC;;AAhCa,oBAAY,GAAG,gBAAgB,CAAC;AAChC,kBAAU,GAAe,OAAO,CAAC,KAAK,CAAC;SAH1C,OAAO","sourcesContent":["import {isDefined} from '../../utils/utils';\nimport iconMap from '@esteco/soul-core/icons/file-icons/file-icons-map.json';\nexport class IconMap {\n\n  public static DEFAULT_ICON = 'not-recognized';\n  public static ICON_FILES: IconFile[] = iconMap.icons;\n  private readonly FILE_ICON_PATH: string;\n\n  constructor(assetsFolder: string) {\n    this.FILE_ICON_PATH = `${assetsFolder}/sprite/file-icons.symbol.svg`;\n  }\n\n  public getIconPath(icon: string): string {\n    return this.getIconByName(icon) || this.getIconByExtension(icon) || this.getDefaultIcon();\n  }\n\n\n  private getIconByExtension(extension: string): string | undefined {\n    if(extension?.charAt(0) !== '.'){\n      extension = `.${extension}`;\n    }\n    const icon = IconMap.ICON_FILES.find(iconFile => iconFile.extensions.indexOf(extension?.toLowerCase()) > -1);\n    if (isDefined(icon)) {\n      return `${this.FILE_ICON_PATH}#${icon.iconName}`;\n    }\n  }\n\n  private getIconByName(iconName: string): string | undefined {\n    const icon = IconMap.ICON_FILES.find(iconFile => iconFile.iconName.toLowerCase() === iconName?.toLowerCase());\n    if (isDefined(icon)) {\n      return `${this.FILE_ICON_PATH}#${icon.iconName}`;\n    }\n  }\n\n  private getDefaultIcon(): string {\n    return `${this.FILE_ICON_PATH}#${IconMap.DEFAULT_ICON}`;\n  }\n\n}\n\nexport type IconFile = { iconName: string, extensions: string[] }\n"]}