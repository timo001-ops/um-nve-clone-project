{"version":3,"file":"soul-avatar.js","sourceRoot":"","sources":["../../../../../../../src/components/soul-avatar/soul-avatar.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, ComponentWillLoad, h, Host, Prop, State, Watch} from '@stencil/core';\nimport {isDefined, isNotEmpty} from '../../utils/utils';\nimport {StatusHelper} from '../../services/StatusHelper';\nimport {SizeHelper} from '../../services/SizeHelper';\n\n@Component({\n  tag: 'soul-avatar',\n  styleUrl: 'soul-avatar.scss',\n  shadow: true,\n})\nexport class SoulAvatar implements ComponentWillLoad {\n\n  @Prop({reflect: true}) type: 'user' | 'entity' = 'user';\n  @Prop({reflect: true}) size: 's' | 'm' | 'l' | 'xl' = 'm';\n  @Prop({reflect: true}) status?: 'positive' | 'waiting' | 'locked' | 'warning';\n  @Prop({reflect: true}) imageUrl: string;\n  @Prop({reflect: true}) icon: string;\n  @Prop({reflect: true}) chars: string;\n  @Prop({reflect: true}) name: string;\n  @Prop({reflect: true}) additionalText: string;\n  @Prop({reflect: true}) thumbnailOnly: boolean = false;\n  @Prop({reflect: true}) color: 'auto' | 'primary' | 'neutral' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 = 'auto';\n  @Prop({reflect: true}) accessibilityLabel: string;\n  @Prop({reflect: true}) muted: boolean = false;\n  @Prop({reflect: true}) statusMessage: string;\n\n  private ariaLabel: string;\n  private supportedSizes = ['s', 'm', 'l', 'xl'];\n  private supportedColors = ['auto', 'primary', 'neutral'];\n  private maxColorIndex = 13;\n  private supportedStatuses = ['positive', 'waiting', 'locked', 'warning'];\n  private statusHelper = new StatusHelper();\n  private sizeHelper = new SizeHelper();\n  private contentElement: HTMLElement;\n\n  @State()\n  private imageError = false;\n\n  public componentWillLoad(): void {\n    this.updateAriaLabel();\n  }\n\n  @Watch('size')\n  public sizeChange(newValue: string): void {\n    this.sizeHelper.validateSize(this.supportedSizes, newValue);\n  }\n\n  @Watch('status')\n  public statusChange(newValue: string): void {\n    this.statusHelper.validateStatus(this.supportedStatuses, newValue);\n  }\n\n  @Watch('color')\n  public colorChange(newValue: string): void {\n    this.validateColors(newValue);\n  }\n\n  @Watch('accessibilityLabel')\n  @Watch('name')\n  @Watch('additionalText')\n  @Watch('thumbnailOnly')\n  public updateAriaLabel(): void {\n    let label = this.accessibilityLabel || this.name || '';\n\n    if (!this.accessibilityLabel) {\n      if (isNotEmpty(this.additionalText) && !this.hasStatusWithMessage()) {\n        label += `. ${this.additionalText}`;\n      }\n      if (this.hasStatusWithMessage()) {\n        label += `. ${this.statusMessage}`;\n      }\n    }\n\n    this.ariaLabel = label;\n  }\n\n  render() {\n    const thumbnailType: ThumbnailType = this.getThumbnailType();\n    const avatarColor: Omit<ColorType, 'auto'> = this.getAvatarColor();\n    this.imageError = false;\n    return (\n      <Host aria-label={this.ariaLabel}>\n        <div class={`soul-avatar soul-avatar-color--${avatarColor}`}>\n          <div class=\"soul-avatar__thumbnail soul-tooltip\" title={this.thumbnailOnly ? this.ariaLabel : ''}>\n            {thumbnailType === 'image' ? <img onError={() => this.imageError = true} class=\"soul-avatar__image\" src={this.imageUrl} alt=\"\"/> : ''}\n            {thumbnailType === 'icon' ? <div class=\"soul-avatar__icon\">\n              <soul-icon name={this.icon}></soul-icon>\n            </div> : ''\n            }\n            {thumbnailType === 'chars' ?\n              <div class=\"soul-avatar__chars\">\n                <abbr>{this.getOrCalculateChars()}</abbr>\n              </div> : ''\n            }\n            {this.hasStatus() ?\n              <div class=\"soul-avatar__indicator\">\n                <soul-indicator type={this.status} border></soul-indicator>\n              </div> : ''\n            }\n          </div>\n          {!this.thumbnailOnly && this.hasTextContent() ?\n            <div class=\"soul-avatar__content\" ref={el => this.contentElement = el as HTMLElement}>\n              {isNotEmpty(this.name) ?\n                <span class=\"soul-avatar__name\" onMouseOver={this.onMouseOver.bind(this)}>{this.name}</span> : ''\n              }\n              {isNotEmpty(this.additionalText) && !this.hasStatusWithMessage() ?\n                <span class=\"soul-avatar__additional-text\" onMouseOver={this.onMouseOver.bind(this)}>{this.additionalText}</span> : ''\n              }\n              {this.hasStatusWithMessage() ?\n                <span class=\"soul-avatar__status-message\" onMouseOver={this.onMouseOver.bind(this)}>{this.statusMessage}</span> : ''\n              }\n            </div> : ''\n          }\n        </div>\n      </Host>\n    );\n  }\n\n  private onMouseOver(e: MouseEvent): void {\n    const target = e.target as HTMLElement;\n\n    if (target.scrollWidth > this.contentElement.offsetWidth) {\n      target.title = target.textContent ?? '';\n    } else {\n      target.title = '';\n    }\n  }\n\n  private getAvatarColor(): Omit<ColorType, 'auto'> {\n    if (this.color === 'primary' || this.color === 'neutral' || this.isColorInRange(this.color)) {\n      return this.color;\n    }\n    return this.getColorIndexFromLetters();\n  }\n\n  private getColorIndexFromLetters(): Omit<ColorType, 'auto'> {\n    const chars = this.getOrCalculateChars();\n    return isNotEmpty(chars) ? this.getColorIndexFromChars(chars.trim().toUpperCase()) : 'primary';\n  }\n\n  private getColorIndexFromChars(chars: string): ColorIndex {\n    const firstCharCode = chars.charCodeAt(0);\n    return (firstCharCode % this.maxColorIndex) + 1 as ColorIndex;\n  }\n\n  private getThumbnailType(): ThumbnailType {\n    if (isNotEmpty(this.imageUrl) && !this.imageError) {\n      return 'image';\n    }\n    if (isNotEmpty(this.icon)) {\n      return 'icon';\n    }\n    return 'chars';\n  }\n\n  private getOrCalculateChars(): string | null {\n    return this.chars ? this.chars.trim() : this.getCharsFromContent();\n  }\n\n  private getCharsFromContent(): string | null {\n    return this.name ? this.getNameInitials(this.name) : this.getCharsFromAdditionalText();\n  }\n\n  private getNameInitials(name: string): string {\n    const initials = name.split(' ').map(token => token.slice(0, 1));\n    return initials.length > 1 ? initials.join('').slice(0, 3) : name.slice(0, 2);\n  }\n\n  private getCharsFromAdditionalText(): string | null {\n    return this.additionalText ? this.getNameInitials(this.additionalText) : null;\n  }\n\n  private validateColors(newValue: string): void {\n    if (isDefined(this.color) && !this.supportedColors.includes(newValue) && !this.isColorInRange(newValue)) {\n      console.debug(`Color ${newValue} not supported. Supported colors: ${this.supportedColors.join(', ')} and a index between 1 and 13`);\n    }\n  }\n\n  private isColorInRange(color: string | number): boolean {\n    const colorNumber = parseInt(color as string);\n    return !isNaN(colorNumber) && colorNumber > 0 && colorNumber <= this.maxColorIndex;\n  }\n\n  private hasTextContent(): boolean {\n    return isNotEmpty(this.name) || isNotEmpty(this.additionalText) || this.hasStatusWithMessage();\n  }\n\n  private hasStatus(): boolean {\n    return isDefined(this.status) && this.statusHelper.isValidStatus(this.supportedStatuses, this.status);\n  }\n\n  private hasStatusWithMessage(): boolean {\n    return this.hasStatus() && isNotEmpty(this.statusMessage);\n  }\n}\n\ntype ThumbnailType = 'icon' | 'image' | 'chars';\ntype ColorType = 'auto' | 'primary' | 'neutral' | ColorIndex;\ntype ColorIndex = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13\n"]}