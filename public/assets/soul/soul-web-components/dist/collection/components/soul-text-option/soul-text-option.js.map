{"version":3,"file":"soul-text-option.js","sourceRoot":"","sources":["../../../../../../../src/components/soul-text-option/soul-text-option.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, ComponentInterface, Event, EventEmitter, h, Host, Method, Prop, Watch} from '@stencil/core';\nimport {OptionHelper} from '../../services/OptionHelper';\nimport {throttle} from '../../utils/Throttle';\nimport {isNotEmpty} from '../../utils/utils';\nimport {SelectHelper} from '../../services/SelectHelper';\n\n@Component({\n  tag: 'soul-text-option',\n  styleUrl: 'soul-text-option.scss',\n  shadow: true\n})\nexport class SoulTextOption implements ComponentInterface {\n\n  @Prop({reflect: true}) public additionalText: string;\n  @Prop({reflect: true}) public disabled = false;\n  @Prop({reflect: true}) public hidden = false;\n  @Prop({reflect: true}) public highlighted = false;\n  @Prop({reflect: true}) public passive = false;\n  @Prop({reflect: true}) public selected = false;\n  @Prop({reflect: true}) public dataSelected = false;\n  @Prop({reflect: true}) public text: string;\n  @Prop({reflect: true}) public nonFilterable = false;\n  @Prop({reflect: false, mutable: false}) public readonly instanceId = `js-soul-text-option-${++textOptionId}`;\n  @Prop() public value: any;\n\n  @Event() public soulOptionChange: EventEmitter<SoulTextOption>;\n  @Event() public soulOptionClick: EventEmitter<SoulTextOption>;\n  @Event() public soulOptionHover: EventEmitter<SoulTextOption>;\n  @Event() public soulOptionSelectChange: EventEmitter<SoulTextOption>;\n\n  private iconSlot: HTMLSlotElement;\n  private infoSlot: HTMLSlotElement;\n  private textOptionElement: HTMLDivElement;\n  private optionHelper: OptionHelper;\n  private hostElement: HTMLElement;\n\n  public componentDidLoad(): void {\n    this.optionHelper = new OptionHelper(this.onChange.bind(this), [this.infoSlot, this.iconSlot]);\n    if (this.selected) {\n      this.onSelectedChange();\n    }\n    this.onChange(); // Needed when option has no slotted content\n  }\n\n  public componentDidRender(): void {\n    this.setIconSlotVisibility();\n  }\n\n  public disconnectedCallback() {\n    this.optionHelper?.disconnect();\n  }\n\n  @Method()\n  public async clone(): Promise<HTMLSoulTextOptionElement> {\n    const clonedElement = document.createElement('soul-text-option');\n    clonedElement.text = this.text;\n    clonedElement.additionalText = this.additionalText;\n    clonedElement.passive = true;\n    const clonedSlotContents: Element[] = this.optionHelper.cloneSlotsContent();\n    clonedElement.append(...clonedSlotContents);\n    return Promise.resolve(clonedElement);\n  }\n\n  @Method()\n  public async match(term: string): Promise<boolean> {\n    return this.text?.toLowerCase().includes(term.toLowerCase()) || this.additionalText?.toLowerCase().includes(term.toLowerCase());\n  }\n\n\n  @Watch('text')\n  @Watch('additionalText')\n  public onChange(): void {\n    if (this.optionHelper && this.dataSelected && !this.passive) {\n      this.soulOptionChange.emit(this);\n    }\n  }\n\n  @Watch('selected')\n  public onSelectedChange(): void {\n    if (this.optionHelper && !this.passive) {\n      this.dataSelected = this.selected;\n      this.optionHelper.onSelectChange(this.selected);\n      this.soulOptionSelectChange.emit(this);\n    }\n  }\n\n  render() {\n    return (\n      <Host ref={el => this.hostElement = el as HTMLElement}>\n        <div class=\"soul-text-option\" onMouseMove={throttle(this.onMouseMove.bind(this), 1000)} onMouseDown={(event) => this.onMouseDown(event)}\n             ref={el => this.textOptionElement = el as HTMLDivElement}>\n          <div class=\"soul-grid soul-grid--horizontal soul-grid--align-center soul-grid--compact-gap\">\n            <div class=\"soul-grid-item-auto-span  soul-text-option__icon\">\n              <slot ref={el => this.iconSlot = el as HTMLSlotElement} name=\"icon\" onSlotchange={this.setIconSlotVisibility.bind(this)}></slot>\n            </div>\n            <div class=\"soul-grid-item-fill-span\">\n              {isNotEmpty(this.text) ? <span class=\"soul-label h-truncate\">{this.text}</span> : ''\n              }\n              {isNotEmpty(this.additionalText) ? <span class=\"soul-label soul-label--reduced soul-label--micro h-truncate\">{this.additionalText}</span> : ''\n              }\n            </div>\n            <div class=\"soul-grid-item-auto-span\">\n              <slot ref={el => this.infoSlot = el as HTMLSlotElement} name=\"info\"></slot>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  private onMouseMove(): void {\n    if (!this.passive && !this.isOptionDisabled()) {\n      this.soulOptionHover.emit(this);\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.passive) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (!this.isOptionDisabled()) {\n        this.soulOptionClick.emit(this);\n      }\n    }\n  }\n\n  private isOptionDisabled(): boolean {\n    return this.disabled || this.hostElement.hasAttribute(SelectHelper.GROUP_DISABLED_ATTRIBUTE);\n  }\n\n  private setIconSlotVisibility(): void {\n    if (this.iconSlot.assignedElements().length > 0) {\n      this.textOptionElement.style.setProperty('--soul-text-option-icon-display', 'flex');\n    } else {\n      this.textOptionElement.style.setProperty('--soul-text-option-icon-display', 'none');\n    }\n  }\n\n}\n\nlet textOptionId = 0;\n"]}