{"version":3,"file":"soul-avatar-group.js","sourceRoot":"","sources":["../../../../../../../src/components/soul-avatar-group/soul-avatar-group.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, Host, h, Prop, State, Watch} from '@stencil/core';\n\n@Component({\n  tag: 'soul-avatar-group',\n  styleUrl: 'soul-avatar-group.scss',\n  shadow: true,\n})\nexport class SoulAvatarGroup {\n\n  @Prop({reflect: true}) maxVisibleAvatars = 4;\n  @Prop({reflect: true}) size: 's' | 'm' | 'l' | 'xl' = 'm';\n\n  @State()\n  private counter: CounterInfo = {visible: false};\n  private slot: HTMLSlotElement;\n  private supportedSizes = ['s', 'm', 'l', 'xl'];\n  private VISIBLE_AVATAR_CLASS: AvatarClass = 'soul-avatar-group__visible-avatar';\n  private HIDDEN_AVATAR_CLASS: AvatarClass = 'soul-avatar-group__hidden-avatar';\n\n\n  @Watch('maxVisibleAvatars')\n  public maxVisibleAvatarsChanged(): void {\n    this.updateAvatarGroup();\n  }\n\n  @Watch('size')\n  public sizeChange(newValue: string): void {\n    this.validateSize(newValue);\n    this.updateAvatarGroup();\n  }\n\n  render() {\n    return (\n      <Host>\n          <slot onSlotchange={() => this.updateAvatarGroup()} ref={el => this.slot = el as HTMLSlotElement}></slot>\n          {this.counter.visible ?\n            <soul-avatar\n              class={this.VISIBLE_AVATAR_CLASS}\n              color=\"neutral\"\n              chars={'+' + this.counter.number}\n              size={this.size}\n              type=\"user\">\n            </soul-avatar> : ''}\n      </Host>\n    );\n  }\n\n  private updateAvatarGroup(): void {\n    this.updateAvatarItems();\n    this.updateCounter();\n  }\n\n  private updateCounter(): void {\n    const currentCounter: CounterInfo = {\n      visible: false\n    };\n    if (this.slot.assignedElements().length > this.maxVisibleAvatars) {\n      currentCounter.visible = true;\n      currentCounter.number = this.slot.assignedElements().length - this.maxVisibleAvatars\n    }\n    this.counter = currentCounter;\n  }\n\n  private updateAvatarItems(): void {\n    this.slot.assignedElements().forEach((slotted: HTMLElement, index) => {\n      if (index >= this.maxVisibleAvatars) {\n        this.setAvatarVisibility(slotted, this.HIDDEN_AVATAR_CLASS);\n      } else {\n        this.setAvatarVisibility(slotted, this.VISIBLE_AVATAR_CLASS);\n      }\n      slotted.matches('soul-avatar') ?\n        this.standardizeAvatar(slotted as HTMLSoulAvatarElement) :\n        slotted.querySelectorAll('soul-avatar').forEach(soulAvatar => {\n          this.standardizeAvatar(soulAvatar)\n        });\n    });\n  }\n\n\n  private validateSize(newValue: string): void {\n    if (!this.supportedSizes.includes(newValue)) {\n      console.debug(`Size ${newValue} not supported. Supported sizes: ${this.supportedSizes.join(', ')}`);\n    }\n  }\n\n  private setAvatarVisibility(slotted: HTMLElement, avatarClass: string) {\n    slotted.classList.remove(this.VISIBLE_AVATAR_CLASS, this.HIDDEN_AVATAR_CLASS);\n    slotted.classList.add(avatarClass);\n  }\n\n  private standardizeAvatar(soulAvatar: HTMLSoulAvatarElement) {\n    soulAvatar.size = this.size;\n    soulAvatar.thumbnailOnly = true;\n    soulAvatar.status = undefined;\n  }\n}\n\ntype CounterInfo = { number?: number, visible: boolean };\ntype AvatarClass = 'soul-avatar-group__visible-avatar' | 'soul-avatar-group__hidden-avatar';\n"]}