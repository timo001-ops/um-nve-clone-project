{"version":3,"names":["ProgressHelper","getRange","min","max","Number","isNaN","console","debug","getLabel","label","indeterminate","progressPercentage","getProgressPercentage","range","progress","isDefined","percentage","Math","floor","getAccessibilityLabel","accessibilityLabel"],"sources":["./src/services/ProgressHelper.ts"],"sourcesContent":["import {isDefined} from '../utils/utils';\n\nexport class ProgressHelper {\n\n\n  public getRange(min: number, max: number): ProgressRange {\n    if (min >= max || Number.isNaN(min) || Number.isNaN(max)) {\n      console.debug('Invalid min and max. The max and min defaults will be used.');\n      return {min: 0, max: 100};\n    }\n    return {min, max};\n  }\n\n  public getLabel(label: string, indeterminate: boolean, progressPercentage: number): string {\n    return label ? label : !indeterminate ? `${progressPercentage}%` : '';\n  }\n\n  public getProgressPercentage(range: ProgressRange, progress: number): number {\n    progress = !isDefined(progress) || Number.isNaN(progress) ? 0 : progress;\n    const percentage = Math.floor(100 * (progress - range.min) / (range.max - range.min));\n    return Math.min(Math.max(0, percentage), 100);\n  }\n\n  public getAccessibilityLabel(accessibilityLabel:string, label: string): string {\n    return accessibilityLabel ? accessibilityLabel : label;\n  }\n}\n\nexport type ProgressRange = { min: number, max: number };\n"],"mappings":"0CAEaA,EAGJC,SAASC,EAAaC,GAC3B,GAAID,GAAOC,GAAOC,OAAOC,MAAMH,IAAQE,OAAOC,MAAMF,GAAM,CACxDG,QAAQC,MAAM,+DACd,MAAO,CAACL,IAAK,EAAGC,IAAK,I,CAEvB,MAAO,CAACD,MAAKC,M,CAGRK,SAASC,EAAeC,EAAwBC,GACrD,OAAOF,EAAQA,GAASC,EAAgB,GAAGC,KAAwB,E,CAG9DC,sBAAsBC,EAAsBC,GACjDA,GAAYC,EAAUD,IAAaV,OAAOC,MAAMS,GAAY,EAAIA,EAChE,MAAME,EAAaC,KAAKC,MAAM,KAAOJ,EAAWD,EAAMX,MAAQW,EAAMV,IAAMU,EAAMX,MAChF,OAAOe,KAAKf,IAAIe,KAAKd,IAAI,EAAGa,GAAa,I,CAGpCG,sBAAsBC,EAA2BX,GACtD,OAAOW,EAAqBA,EAAqBX,C"}