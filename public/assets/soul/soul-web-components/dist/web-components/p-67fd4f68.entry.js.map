{"version":3,"names":["soulAvatarGroupCss","SoulAvatarGroup","this","supportedSizes","VISIBLE_AVATAR_CLASS","HIDDEN_AVATAR_CLASS","visible","maxVisibleAvatarsChanged","updateAvatarGroup","sizeChange","newValue","validateSize","render","h","Host","onSlotchange","ref","el","slot","counter","class","color","chars","number","size","type","updateAvatarItems","updateCounter","currentCounter","assignedElements","length","maxVisibleAvatars","forEach","slotted","index","setAvatarVisibility","matches","standardizeAvatar","querySelectorAll","soulAvatar","includes","console","debug","join","avatarClass","classList","remove","add","thumbnailOnly","status","undefined"],"sources":["./src/components/soul-avatar-group/soul-avatar-group.scss?tag=soul-avatar-group&encapsulation=shadow","./src/components/soul-avatar-group/soul-avatar-group.tsx"],"sourcesContent":["@use 'modules/core';\n\n:host {\n  display: block;\n}\n\n.soul-avatar-group__visible-avatar:not(:first-child),\n::slotted(.soul-avatar-group__visible-avatar:not(:first-child)) {\n  margin-left: var(--_soul-avatar-group-avatar-margin-left);\n}\n\n.soul-avatar-group__visible-avatar,\n::slotted(.soul-avatar-group__visible-avatar) {\n  @include core.flexbox-inline-row();\n  vertical-align: middle;\n}\n\n\n:host([size='s']) {\n  --_soul-avatar-group-avatar-margin-left: -#{core.$soul-space-unit-2-xs};\n}\n\n:host,\n:host([size='m']) {\n  --_soul-avatar-group-avatar-margin-left: -#{core.$soul-space-unit-xs};\n}\n\n:host([size='l']) {\n  --_soul-avatar-group-avatar-margin-left: -#{core.$soul-space-s};\n}\n\n:host([size='xl']) {\n  --_soul-avatar-group-avatar-margin-left: -#{core.$soul-space-l};\n}\n\n::slotted(.soul-avatar-group__hidden-avatar) {\n  display: none;\n}\n","import {Component, Host, h, Prop, State, Watch} from '@stencil/core';\n\n@Component({\n  tag: 'soul-avatar-group',\n  styleUrl: 'soul-avatar-group.scss',\n  shadow: true,\n})\nexport class SoulAvatarGroup {\n\n  @Prop({reflect: true}) maxVisibleAvatars = 4;\n  @Prop({reflect: true}) size: 's' | 'm' | 'l' | 'xl' = 'm';\n\n  @State()\n  private counter: CounterInfo = {visible: false};\n  private slot: HTMLSlotElement;\n  private supportedSizes = ['s', 'm', 'l', 'xl'];\n  private VISIBLE_AVATAR_CLASS: AvatarClass = 'soul-avatar-group__visible-avatar';\n  private HIDDEN_AVATAR_CLASS: AvatarClass = 'soul-avatar-group__hidden-avatar';\n\n\n  @Watch('maxVisibleAvatars')\n  public maxVisibleAvatarsChanged(): void {\n    this.updateAvatarGroup();\n  }\n\n  @Watch('size')\n  public sizeChange(newValue: string): void {\n    this.validateSize(newValue);\n    this.updateAvatarGroup();\n  }\n\n  render() {\n    return (\n      <Host>\n          <slot onSlotchange={() => this.updateAvatarGroup()} ref={el => this.slot = el as HTMLSlotElement}></slot>\n          {this.counter.visible ?\n            <soul-avatar\n              class={this.VISIBLE_AVATAR_CLASS}\n              color=\"neutral\"\n              chars={'+' + this.counter.number}\n              size={this.size}\n              type=\"user\">\n            </soul-avatar> : ''}\n      </Host>\n    );\n  }\n\n  private updateAvatarGroup(): void {\n    this.updateAvatarItems();\n    this.updateCounter();\n  }\n\n  private updateCounter(): void {\n    const currentCounter: CounterInfo = {\n      visible: false\n    };\n    if (this.slot.assignedElements().length > this.maxVisibleAvatars) {\n      currentCounter.visible = true;\n      currentCounter.number = this.slot.assignedElements().length - this.maxVisibleAvatars\n    }\n    this.counter = currentCounter;\n  }\n\n  private updateAvatarItems(): void {\n    this.slot.assignedElements().forEach((slotted: HTMLElement, index) => {\n      if (index >= this.maxVisibleAvatars) {\n        this.setAvatarVisibility(slotted, this.HIDDEN_AVATAR_CLASS);\n      } else {\n        this.setAvatarVisibility(slotted, this.VISIBLE_AVATAR_CLASS);\n      }\n      slotted.matches('soul-avatar') ?\n        this.standardizeAvatar(slotted as HTMLSoulAvatarElement) :\n        slotted.querySelectorAll('soul-avatar').forEach(soulAvatar => {\n          this.standardizeAvatar(soulAvatar)\n        });\n    });\n  }\n\n\n  private validateSize(newValue: string): void {\n    if (!this.supportedSizes.includes(newValue)) {\n      console.debug(`Size ${newValue} not supported. Supported sizes: ${this.supportedSizes.join(', ')}`);\n    }\n  }\n\n  private setAvatarVisibility(slotted: HTMLElement, avatarClass: string) {\n    slotted.classList.remove(this.VISIBLE_AVATAR_CLASS, this.HIDDEN_AVATAR_CLASS);\n    slotted.classList.add(avatarClass);\n  }\n\n  private standardizeAvatar(soulAvatar: HTMLSoulAvatarElement) {\n    soulAvatar.size = this.size;\n    soulAvatar.thumbnailOnly = true;\n    soulAvatar.status = undefined;\n  }\n}\n\ntype CounterInfo = { number?: number, visible: boolean };\ntype AvatarClass = 'soul-avatar-group__visible-avatar' | 'soul-avatar-group__hidden-avatar';\n"],"mappings":"kDAAA,MAAMA,EAAqB,w/B,MCOdC,EAAe,M,yBAQlBC,KAAAC,eAAiB,CAAC,IAAK,IAAK,IAAK,MACjCD,KAAAE,qBAAoC,oCACpCF,KAAAG,oBAAmC,mC,uBARA,E,UACW,I,aAGvB,CAACC,QAAS,M,CAQlCC,2BACLL,KAAKM,mB,CAIAC,WAAWC,GAChBR,KAAKS,aAAaD,GAClBR,KAAKM,mB,CAGPI,SACE,OACEC,EAACC,EAAI,KACDD,EAAA,QAAME,aAAc,IAAMb,KAAKM,oBAAqBQ,IAAKC,GAAMf,KAAKgB,KAAOD,IAC1Ef,KAAKiB,QAAQb,QACZO,EAAA,eACEO,MAAOlB,KAAKE,qBACZiB,MAAM,UACNC,MAAO,IAAMpB,KAAKiB,QAAQI,OAC1BC,KAAMtB,KAAKsB,KACXC,KAAK,SACU,G,CAKnBjB,oBACNN,KAAKwB,oBACLxB,KAAKyB,e,CAGCA,gBACN,MAAMC,EAA8B,CAClCtB,QAAS,OAEX,GAAIJ,KAAKgB,KAAKW,mBAAmBC,OAAS5B,KAAK6B,kBAAmB,CAChEH,EAAetB,QAAU,KACzBsB,EAAeL,OAASrB,KAAKgB,KAAKW,mBAAmBC,OAAS5B,KAAK6B,iB,CAErE7B,KAAKiB,QAAUS,C,CAGTF,oBACNxB,KAAKgB,KAAKW,mBAAmBG,SAAQ,CAACC,EAAsBC,KAC1D,GAAIA,GAAShC,KAAK6B,kBAAmB,CACnC7B,KAAKiC,oBAAoBF,EAAS/B,KAAKG,oB,KAClC,CACLH,KAAKiC,oBAAoBF,EAAS/B,KAAKE,qB,CAEzC6B,EAAQG,QAAQ,eACdlC,KAAKmC,kBAAkBJ,GACvBA,EAAQK,iBAAiB,eAAeN,SAAQO,IAC9CrC,KAAKmC,kBAAkBE,EAAW,GAClC,G,CAKA5B,aAAaD,GACnB,IAAKR,KAAKC,eAAeqC,SAAS9B,GAAW,CAC3C+B,QAAQC,MAAM,QAAQhC,qCAA4CR,KAAKC,eAAewC,KAAK,Q,EAIvFR,oBAAoBF,EAAsBW,GAChDX,EAAQY,UAAUC,OAAO5C,KAAKE,qBAAsBF,KAAKG,qBACzD4B,EAAQY,UAAUE,IAAIH,E,CAGhBP,kBAAkBE,GACxBA,EAAWf,KAAOtB,KAAKsB,KACvBe,EAAWS,cAAgB,KAC3BT,EAAWU,OAASC,S"}