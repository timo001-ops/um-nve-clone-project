{"version":3,"names":["sides","min","Math","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","evaluate","value","param","getSide","placement","split","getAlignment","getOppositeAxis","axis","getAxisLength","getSideAxis","includes","getAlignmentAxis","getAlignmentSides","rects","rtl","alignment","alignmentAxis","length","mainAlignmentSide","reference","floating","getOppositePlacement","getExpandedPlacements","oppositePlacement","getOppositeAlignmentPlacement","replace","getSideList","side","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","map","concat","expandPaddingObject","padding","getPaddingObject","rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","sideAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","computePosition","async","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","getElementRects","statefulPlacement","middlewareData","resetCount","i","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","flip","_middlewareData$arrow","_middlewareData$flip","mainAxis","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","detectOverflowOptions","arrow","alignmentOffset","initialSideAxis","isBasePlacement","hasFallbackAxisSideDirection","push","placements","overflow","overflows","overflowsData","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","resetPlacement","d","sort","a","b","_overflowsData$filter2","currentSideAxis","reduce","acc","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","offset","_middlewareData$offse","diffCoords","size","_state$middlewareData","_state$middlewareData2","apply","isYAxis","heightSide","widthSide","maximumClippingHeight","maximumClippingWidth","overflowAvailableHeight","overflowAvailableWidth","noShift","shift","availableHeight","availableWidth","enabled","xMin","xMax","yMin","yMax","nextDimensions","getDimensions","hasWindow","window","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","overflowX","overflowY","display","getComputedStyle","test","isTableElement","isTopLayer","selector","matches","e","isContainingBlock","elementOrCss","webkit","isWebKit","css","transform","perspective","containerType","backdropFilter","willChange","contain","getContainingBlock","currentNode","getParentNode","isLastTraversableNode","CSS","supports","getNodeScroll","scrollLeft","scrollTop","scrollX","scrollY","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","traverseIframes","_node$ownerDocument2","scrollableAncestor","isBody","win","frameElement","getFrameElement","visualViewport","parent","Object","getPrototypeOf","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","shouldAddVisualOffsets","isFixed","floatingOffsetParent","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","topLayer","scroll","isOffsetParentAnElement","offsetRect","getClientRects","Array","from","getWindowScrollBarX","leftScroll","getDocumentRect","html","scrollWidth","clientWidth","scrollHeight","clientHeight","getViewportRect","visualViewportBased","getInnerBoundingClientRect","getClientRectFromClippingAncestor","clippingAncestor","hasFixedPositionAncestor","stopNode","position","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","shouldDropCurrentNode","ancestor","set","elementClippingAncestors","this","_c","clippingAncestors","firstClippingAncestor","clippingRect","accRect","getRectRelativeToOffsetParent","htmlX","htmlY","htmlRect","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","svgOffsetParent","getOffsetParentFn","getDimensionsFn","floatingDimensions","observeMove","onMove","io","timeoutId","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","insetTop","insetRight","insetBottom","insetLeft","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","IntersectionObserver","observe","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","frameId","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","offset$1","flip$1","size$1","hide$1","Map","mergedOptions","platformWithCache","computePosition$1"],"sources":["../../../node_modules/@floating-ui/utils/dist/floating-ui.utils.esm.js","../../../node_modules/@floating-ui/core/dist/floating-ui.core.esm.js","../../../node_modules/@floating-ui/utils/dom/floating-ui.utils.dom.esm.js","../../../node_modules/@floating-ui/dom/dist/floating-ui.dom.esm.js"],"sourcesContent":["/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isTopLayer(element) {\n  return [':popover-open', ':modal'].some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (e) {\n      return false;\n    }\n  });\n}\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n","import { rectToClientRect, detectOverflow as detectOverflow$1, offset as offset$1, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n      // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  let htmlX = 0;\n  let htmlY = 0;\n  if (documentElement && !isOffsetParentAnElement && !isFixed) {\n    const htmlRect = documentElement.getBoundingClientRect();\n    htmlY = htmlRect.top + scroll.scrollTop;\n    htmlX = htmlRect.left + scroll.scrollLeft -\n    // RTL <body> scrollbar.\n    getWindowScrollBarX(documentElement, htmlRect);\n  }\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlX;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlY;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n"],"mappings":"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"}