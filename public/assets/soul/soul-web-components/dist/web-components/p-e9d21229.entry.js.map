{"version":3,"names":["soulTextOptionCss","SoulTextOption","textOptionId","componentDidLoad","this","optionHelper","OptionHelper","onChange","bind","infoSlot","iconSlot","selected","onSelectedChange","componentDidRender","setIconSlotVisibility","disconnectedCallback","_a","disconnect","async","clonedElement","document","createElement","text","additionalText","passive","clonedSlotContents","cloneSlotsContent","append","Promise","resolve","term","toLowerCase","includes","_b","dataSelected","soulOptionChange","emit","onSelectChange","soulOptionSelectChange","render","h","Host","ref","el","hostElement","class","onMouseMove","throttle","onMouseDown","event","textOptionElement","name","onSlotchange","isNotEmpty","isOptionDisabled","soulOptionHover","preventDefault","stopPropagation","soulOptionClick","disabled","hasAttribute","SelectHelper","GROUP_DISABLED_ATTRIBUTE","assignedElements","length","style","setProperty"],"sources":["./src/components/soul-text-option/soul-text-option.scss?tag=soul-text-option&encapsulation=shadow","./src/components/soul-text-option/soul-text-option.tsx"],"sourcesContent":["@use \"modules/components/grid\";\n@use \"modules/components/label\";\n@use 'modules/essentials/helpers/text';\n@use \"modules/core\";\n\n:host {\n  display: block;\n  cursor: pointer;\n}\n\n:host([highlighted]:not([highlighted=\"false\"])) {\n  .soul-text-option {\n    background-color: core.$soul-color-background-hover-on-light;\n  }\n}\n\n:host([data-selected]:not([data-selected=\"false\"])) {\n  .soul-text-option {\n    background-color: core.$soul-color-background-active;\n  }\n}\n\n:host([data-filtered]),\n:host([data-group-hidden]:not([data-group-hidden=\"false\"])),\n:host([hidden]:not([hidden=\"false\"])) {\n  display: none;\n}\n:host([data-group-disabled]:not([data-group-disabled=\"false\"])),\n:host([disabled]:not([disabled=\"false\"])) {\n  opacity: core.$opacity-l;\n  cursor: not-allowed;\n\n  ::slotted(soul-file-icon) {\n    opacity: core.$opacity-m;\n  }\n\n  ::slotted(soul-icon) {\n    --soul-icon-color: #{core.$soul-color-text-on-light};\n  }\n}\n\n.soul-text-option {\n  padding: core.$soul-space-inset-xs;\n  border-radius: core.$soul-border-radius-m;\n}\n\n.soul-text-option__icon {\n  display: var(--soul-text-option-icon-display, none);\n}\n\n\n","import {Component, ComponentInterface, Event, EventEmitter, h, Host, Method, Prop, Watch} from '@stencil/core';\nimport {OptionHelper} from '../../services/OptionHelper';\nimport {throttle} from '../../utils/Throttle';\nimport {isNotEmpty} from '../../utils/utils';\nimport {SelectHelper} from '../../services/SelectHelper';\n\n@Component({\n  tag: 'soul-text-option',\n  styleUrl: 'soul-text-option.scss',\n  shadow: true\n})\nexport class SoulTextOption implements ComponentInterface {\n\n  @Prop({reflect: true}) public additionalText: string;\n  @Prop({reflect: true}) public disabled = false;\n  @Prop({reflect: true}) public hidden = false;\n  @Prop({reflect: true}) public highlighted = false;\n  @Prop({reflect: true}) public passive = false;\n  @Prop({reflect: true}) public selected = false;\n  @Prop({reflect: true}) public dataSelected = false;\n  @Prop({reflect: true}) public text: string;\n  @Prop({reflect: true}) public nonFilterable = false;\n  @Prop({reflect: false, mutable: false}) public readonly instanceId = `js-soul-text-option-${++textOptionId}`;\n  @Prop() public value: any;\n\n  @Event() public soulOptionChange: EventEmitter<SoulTextOption>;\n  @Event() public soulOptionClick: EventEmitter<SoulTextOption>;\n  @Event() public soulOptionHover: EventEmitter<SoulTextOption>;\n  @Event() public soulOptionSelectChange: EventEmitter<SoulTextOption>;\n\n  private iconSlot: HTMLSlotElement;\n  private infoSlot: HTMLSlotElement;\n  private textOptionElement: HTMLDivElement;\n  private optionHelper: OptionHelper;\n  private hostElement: HTMLElement;\n\n  public componentDidLoad(): void {\n    this.optionHelper = new OptionHelper(this.onChange.bind(this), [this.infoSlot, this.iconSlot]);\n    if (this.selected) {\n      this.onSelectedChange();\n    }\n    this.onChange(); // Needed when option has no slotted content\n  }\n\n  public componentDidRender(): void {\n    this.setIconSlotVisibility();\n  }\n\n  public disconnectedCallback() {\n    this.optionHelper?.disconnect();\n  }\n\n  @Method()\n  public async clone(): Promise<HTMLSoulTextOptionElement> {\n    const clonedElement = document.createElement('soul-text-option');\n    clonedElement.text = this.text;\n    clonedElement.additionalText = this.additionalText;\n    clonedElement.passive = true;\n    const clonedSlotContents: Element[] = this.optionHelper.cloneSlotsContent();\n    clonedElement.append(...clonedSlotContents);\n    return Promise.resolve(clonedElement);\n  }\n\n  @Method()\n  public async match(term: string): Promise<boolean> {\n    return this.text?.toLowerCase().includes(term.toLowerCase()) || this.additionalText?.toLowerCase().includes(term.toLowerCase());\n  }\n\n\n  @Watch('text')\n  @Watch('additionalText')\n  public onChange(): void {\n    if (this.optionHelper && this.dataSelected && !this.passive) {\n      this.soulOptionChange.emit(this);\n    }\n  }\n\n  @Watch('selected')\n  public onSelectedChange(): void {\n    if (this.optionHelper && !this.passive) {\n      this.dataSelected = this.selected;\n      this.optionHelper.onSelectChange(this.selected);\n      this.soulOptionSelectChange.emit(this);\n    }\n  }\n\n  render() {\n    return (\n      <Host ref={el => this.hostElement = el as HTMLElement}>\n        <div class=\"soul-text-option\" onMouseMove={throttle(this.onMouseMove.bind(this), 1000)} onMouseDown={(event) => this.onMouseDown(event)}\n             ref={el => this.textOptionElement = el as HTMLDivElement}>\n          <div class=\"soul-grid soul-grid--horizontal soul-grid--align-center soul-grid--compact-gap\">\n            <div class=\"soul-grid-item-auto-span  soul-text-option__icon\">\n              <slot ref={el => this.iconSlot = el as HTMLSlotElement} name=\"icon\" onSlotchange={this.setIconSlotVisibility.bind(this)}></slot>\n            </div>\n            <div class=\"soul-grid-item-fill-span\">\n              {isNotEmpty(this.text) ? <span class=\"soul-label h-truncate\">{this.text}</span> : ''\n              }\n              {isNotEmpty(this.additionalText) ? <span class=\"soul-label soul-label--reduced soul-label--micro h-truncate\">{this.additionalText}</span> : ''\n              }\n            </div>\n            <div class=\"soul-grid-item-auto-span\">\n              <slot ref={el => this.infoSlot = el as HTMLSlotElement} name=\"info\"></slot>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  private onMouseMove(): void {\n    if (!this.passive && !this.isOptionDisabled()) {\n      this.soulOptionHover.emit(this);\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    if (!this.passive) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (!this.isOptionDisabled()) {\n        this.soulOptionClick.emit(this);\n      }\n    }\n  }\n\n  private isOptionDisabled(): boolean {\n    return this.disabled || this.hostElement.hasAttribute(SelectHelper.GROUP_DISABLED_ATTRIBUTE);\n  }\n\n  private setIconSlotVisibility(): void {\n    if (this.iconSlot.assignedElements().length > 0) {\n      this.textOptionElement.style.setProperty('--soul-text-option-icon-display', 'flex');\n    } else {\n      this.textOptionElement.style.setProperty('--soul-text-option-icon-display', 'none');\n    }\n  }\n\n}\n\nlet textOptionId = 0;\n"],"mappings":"uKAAA,MAAMA,EAAoB,uyjH,MCWbC,EAAc,M,yRAGgB,M,YACF,M,iBACK,M,aACJ,M,cACC,M,kBACI,M,uCAEC,M,gBACuB,yBAAyBC,I,qBAcvFC,mBACLC,KAAKC,aAAe,IAAIC,EAAaF,KAAKG,SAASC,KAAKJ,MAAO,CAACA,KAAKK,SAAUL,KAAKM,WACpF,GAAIN,KAAKO,SAAU,CACjBP,KAAKQ,kB,CAEPR,KAAKG,U,CAGAM,qBACLT,KAAKU,uB,CAGAC,uB,OACLC,EAAAZ,KAAKC,gBAAY,MAAAW,SAAA,SAAAA,EAAEC,Y,CAIdC,cACL,MAAMC,EAAgBC,SAASC,cAAc,oBAC7CF,EAAcG,KAAOlB,KAAKkB,KAC1BH,EAAcI,eAAiBnB,KAAKmB,eACpCJ,EAAcK,QAAU,KACxB,MAAMC,EAAgCrB,KAAKC,aAAaqB,oBACxDP,EAAcQ,UAAUF,GACxB,OAAOG,QAAQC,QAAQV,E,CAIlBD,YAAYY,G,QACjB,QAAOd,EAAAZ,KAAKkB,QAAI,MAAAN,SAAA,SAAAA,EAAEe,cAAcC,SAASF,EAAKC,mBAAkBE,EAAA7B,KAAKmB,kBAAc,MAAAU,SAAA,SAAAA,EAAEF,cAAcC,SAASF,EAAKC,e,CAM5GxB,WACL,GAAIH,KAAKC,cAAgBD,KAAK8B,eAAiB9B,KAAKoB,QAAS,CAC3DpB,KAAK+B,iBAAiBC,KAAKhC,K,EAKxBQ,mBACL,GAAIR,KAAKC,eAAiBD,KAAKoB,QAAS,CACtCpB,KAAK8B,aAAe9B,KAAKO,SACzBP,KAAKC,aAAagC,eAAejC,KAAKO,UACtCP,KAAKkC,uBAAuBF,KAAKhC,K,EAIrCmC,SACE,OACEC,EAACC,EAAI,CAACC,IAAKC,GAAMvC,KAAKwC,YAAcD,GAClCH,EAAA,OAAKK,MAAM,mBAAmBC,YAAaC,EAAS3C,KAAK0C,YAAYtC,KAAKJ,MAAO,KAAO4C,YAAcC,GAAU7C,KAAK4C,YAAYC,GAC5HP,IAAKC,GAAMvC,KAAK8C,kBAAoBP,GACvCH,EAAA,OAAKK,MAAM,kFACTL,EAAA,OAAKK,MAAM,oDACTL,EAAA,QAAME,IAAKC,GAAMvC,KAAKM,SAAWiC,EAAuBQ,KAAK,OAAOC,aAAchD,KAAKU,sBAAsBN,KAAKJ,SAEpHoC,EAAA,OAAKK,MAAM,4BACRQ,EAAWjD,KAAKkB,MAAQkB,EAAA,QAAMK,MAAM,yBAAyBzC,KAAKkB,MAAe,GAEjF+B,EAAWjD,KAAKmB,gBAAkBiB,EAAA,QAAMK,MAAM,+DAA+DzC,KAAKmB,gBAAyB,IAG9IiB,EAAA,OAAKK,MAAM,4BACTL,EAAA,QAAME,IAAKC,GAAMvC,KAAKK,SAAWkC,EAAuBQ,KAAK,Y,CAQjEL,cACN,IAAK1C,KAAKoB,UAAYpB,KAAKkD,mBAAoB,CAC7ClD,KAAKmD,gBAAgBnB,KAAKhC,K,EAItB4C,YAAYC,GAClB,IAAK7C,KAAKoB,QAAS,CACjByB,EAAMO,iBACNP,EAAMQ,kBACN,IAAKrD,KAAKkD,mBAAoB,CAC5BlD,KAAKsD,gBAAgBtB,KAAKhC,K,GAKxBkD,mBACN,OAAOlD,KAAKuD,UAAYvD,KAAKwC,YAAYgB,aAAaC,EAAaC,yB,CAG7DhD,wBACN,GAAIV,KAAKM,SAASqD,mBAAmBC,OAAS,EAAG,CAC/C5D,KAAK8C,kBAAkBe,MAAMC,YAAY,kCAAmC,O,KACvE,CACL9D,KAAK8C,kBAAkBe,MAAMC,YAAY,kCAAmC,O,8GAMlF,IAAIhE,EAAe,E"}