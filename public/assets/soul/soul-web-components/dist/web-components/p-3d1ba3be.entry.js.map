{"version":3,"names":["soulInputWrapperCss","SoulInputWrapper","this","instanceId","inputWrapperId","INPUT_TYPE_ATTRIBUTE","INPUT_TYPE_DATA_ATTRIBUTE","overlayResizeObserver","ResizeObserver","setInputRightPadding","bind","supportedStatuses","dateTimeTypes","typesWithClearButton","disconnectedCallback","_a","typeObserver","disconnect","componentDidRender","setTooltipTriggerElement","render","h","Host","label","id","class","invalidStyle","invalid","status","isReadonly","renderLabel","renderTooltip","renderSearchIcon","onSlotchange","onInputSlotChange","ref","el","inputSlot","renderInputOverlays","renderStatusMessage","renderHelpText","renderAction","initializeInput","inputElement","assignedElements","addEventListener","onInput","setClearButtonVisibility","inputType","onKeyDown","observe","overlayElement","checkInputValidity","listenForTypeChange","readOnly","isPasswordType","getAttribute","isDateType","includes","isSearchType","isStatusValid","type","shouldRenderStatusMessage","isNotEmpty","statusMessage","shouldRenderCustomIcon","showCustomIconForCurrenBrowser","navigator","userAgent","shouldRenderTooltip","inputOnly","helpText","shouldRenderStatusIndicator","shouldRenderClearButton","isClearSupported","showClearButton","clearButton","isDefined","tooltipElement","triggerElement","hostElement","style","setProperty","getOverlayElementWidth","offsetWidth","forceUpdate","checkValidity","focusInput","focus","value","length","event","key","Keymap","ESC","preventDefault","onClearButtonClick","matches","soulClear","emit","onDateTimeIconClick","showPicker","onPasswordVisibilityToggle","setAttribute","isPasswordRevealed","removeAttribute","hasSlottedAction","querySelector","MutationObserver","mutations","forEach","mutation","attributeName","oldValue","attributes","attributeOldValue","additionalLabel","onClick","renderAdditionalLabel","text","undefined","position","tooltipPosition","name","size","renderClearButton","renderPasswordVisibilityToggle","renderCalendarIcon","renderStatusIndicator","onBlur","color"],"sources":["./src/components/soul-input-wrapper/soul-input-wrapper.scss?tag=soul-input-wrapper&encapsulation=shadow","./src/components/soul-input-wrapper/soul-input-wrapper.component.tsx"],"sourcesContent":["@use \"modules/base-styles/reset\";\n@use \"modules/core\";\n@use \"modules/core/mixins/input\";\n@use \"modules/components/label\";\n@use \"modules/components/button\";\n\n:host {\n  display: block;\n  --soul-input-wrapper-input-width: 1fr;\n  --soul-input-wrapper-input-padding-right: #{core.$soul-space-unit-xs};\n}\n\n:host([input-only]:not([input-only=\"false\"])) {\n  .soul-input-wrapper__label,\n  .soul-input-wrapper__status-message,\n  .soul-input-wrapper__help,\n  .soul-input-wrapper__action {\n    display: none;\n  }\n}\n\n.soul-input-wrapper {\n  display: grid;\n  grid-template-columns: var(--soul-input-wrapper-input-width) auto;\n  grid-template-rows: auto auto auto auto;\n  grid-template-areas: \"label label\" \"input action\" \"status status\" \"help help\";\n\n  &:not(.soul-input-wrapper--readonly) {\n    .soul-input-wrapper__label {\n      @include label.label-input();\n    }\n  }\n\n  &.soul-input-wrapper--readonly {\n    .soul-input-wrapper__label {\n      @include label.label-key();\n    }\n  }\n}\n\n.soul-input-wrapper__label {\n  grid-area: label;\n  @include label.label();\n}\n\n.soul-input-wrapper__search-icon {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  left: core.$soul-space-unit-xs + core.$soul-space-unit-3-xs;\n  --soul-icon-color: #{core.$soul-color-background-icon};\n}\n\n.soul-input-wrapper__control {\n  grid-area: input;\n  position: relative;\n}\n\n.soul-input-wrapper__input-overlays {\n  position: absolute;\n  display: flex;\n  column-gap: core.$soul-space-2-xs;\n  top: 50%;\n  transform: translateY(-50%);\n  right: core.$soul-space-xs;\n  padding: core.$soul-space-inline-left-s;\n\n  &[data-type=\"date\"],\n  &[data-type=\"time\"],\n  &[data-type=\"week\"],\n  &[data-type=\"month\"],\n  &[data-type=\"datetime-local\"] {\n    background-color: core.$soul-color-background-primary;\n  }\n}\n\n.soul-input-wrapper__input-overlays--compact {\n  padding: 0;\n}\n\n.soul-input-wrapper__action {\n  grid-area: action;\n  padding: core.$soul-space-inline-left-2-xs;\n}\n\n.soul-input-wrapper__status-message {\n  grid-area: status;\n}\n\n.soul-input-wrapper__help {\n  grid-area: help;\n}\n\n.soul-input-wrapper__additional-label,\n.soul-input-wrapper__help {\n  @include label.label();\n  @include core.soul-font-weight-regular();\n  color: core.$soul-color-text-reduced-on-light;\n}\n\n.soul-input-wrapper__additional-label {\n  padding: core.$soul-space-inline-left-2-xs;\n}\n\n.soul-input-wrapper__status-message,\n.soul-input-wrapper__help {\n  padding: core.$soul-space-stack-top-2-xs;\n}\n\n::slotted(input) {\n  @include input.input-element-base();\n  text-overflow: ellipsis;\n  max-height: calc(#{input.$line-height-input-text} + #{2 * input.$padding-input-text} + #{2 * input.$border-with-input-text});\n}\n\n::slotted(input[type=\"color\"]) {\n  height: core.$soul-space-unit-xl + core.$soul-space-unit-3-xs;\n  padding: core.$soul-space-squish-xs;\n}\n\n::slotted(input[type=\"text\"]),\n::slotted(input[type=\"password\"]),\n::slotted(input[type=\"number\"]),\n::slotted(input[type=\"url\"]),\n::slotted(input[type=\"email\"]),\n::slotted(input[type=\"search\"]),\n::slotted(input[type=\"color\"]) {\n  padding-right: var(--soul-input-wrapper-input-padding-right);\n}\n\n::slotted(input[type=\"search\"]) {\n  padding-left: core.$soul-space-unit-xl;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  ::slotted(input:hover:not(:disabled)) {\n    box-shadow: core.$soul-shadow-hover-default-inner;\n  }\n\n  .soul-input-wrapper--critical {\n    ::slotted(input:hover:not(:disabled):not([readonly])) {\n      box-shadow: core.$soul-shadow-hover-negative-inner;\n    }\n  }\n\n  .soul-input-wrapper--invalid {\n    ::slotted(input:invalid:hover:not(:disabled):not([readonly])) {\n      box-shadow: core.$soul-shadow-hover-negative-inner;\n    }\n  }\n\n  .soul-input-wrapper--warning {\n    ::slotted(input:hover:not(:disabled):not([readonly])) {\n      box-shadow: core.$soul-shadow-hover-warning-inner;\n    }\n  }\n\n  ::slotted(input[readonly]:hover) {\n    box-shadow: none;\n  }\n}\n\n::slotted(input:focus:not(:disabled)) {\n  border-color: core.$soul-color-border-input-focus;\n  box-shadow: core.$soul-shadow-focus-default-inner;\n}\n\n.soul-input-wrapper--warning {\n  .soul-input-wrapper__status-message {\n    color: core.$soul-color-text-indicator-warning;\n  }\n\n  ::slotted(input:not([readonly])) {\n    border-color: core.$soul-color-border-warning;\n  }\n\n  ::slotted(input:focus:not(:disabled):not([readonly])) {\n    border-color: core.$soul-color-border-warning;\n    box-shadow: core.$soul-shadow-focus-warning-inner;\n  }\n}\n\n.soul-input-wrapper--invalid,\n.soul-input-wrapper--critical {\n  .soul-input-wrapper__status-message {\n    color: core.$soul-color-text-indicator-negative;\n  }\n\n  ::slotted(input:not([readonly])) {\n    border-color: core.$soul-color-border-negative;\n  }\n\n  ::slotted(input:focus:not(:disabled):not([readonly])),\n  ::slotted(input:invalid:focus:not(:disabled):not([readonly])) {\n    border-color: core.$soul-color-border-negative;\n    box-shadow: core.$soul-shadow-focus-negative-inner;\n  }\n}\n\n::slotted(input:disabled) {\n  background-color: core.$soul-color-background-disabled;\n  color: core.$soul-color-text-disabled;\n  cursor: not-allowed;\n}\n\n::slotted(input[readonly]) {\n  display: inline-flex;\n  background-color: core.$soul-choice-color-transparent;\n  padding: 0;\n  width: auto;\n\n  border-top-style: none;\n  border-bottom-style: none;\n  border-left-style: none;\n  border-right-style: none;\n}\n\n::slotted(input[readonly]:focus) {\n  box-shadow: core.$soul-shadow-hover-default-inner;\n}\n\n::slotted(input[readonly]:placeholder-shown) {\n  display: none;\n}\n\n::slotted(input[readonly]::placeholder) {\n  color: core.$soul-choice-color-transparent;\n}\n\n// Rule to manage the date and datetime-local UI helper in Firefox\n@supports (-moz-appearance:none) {\n  .soul-input-wrapper--critical,\n  .soul-input-wrapper--warning,\n  .soul-input-wrapper--invalid {\n    ::slotted(input[type*=\"date\"]:not([readonly])) {\n      padding-right: core.$soul-space-l;\n    }\n  }\n}\n","import {Component, Element, ComponentInterface, h, Host, JSX, Prop, State, Event, forceUpdate, EventEmitter} from '@stencil/core';\nimport {isDefined, isNotEmpty} from '../../utils/utils';\nimport {Keymap} from '../../utils/Keymap';\n\n@Component({\n  tag: 'soul-input-wrapper',\n  styleUrl: 'soul-input-wrapper.scss',\n  shadow: true\n})\nexport class SoulInputWrapper implements ComponentInterface {\n\n  @Prop({reflect: true}) public additionalLabel: string;\n  @Prop({reflect: true}) public clearButton: boolean = false;\n  @Prop({reflect: true}) public inputOnly: boolean = false;\n  @Prop({reflect: true}) public helpText: string;\n  @Prop({reflect: true}) public invalidStyle: boolean = false;\n  @Prop({reflect: true}) public label: string;\n  @Prop({reflect: true}) public status: 'warning' | 'critical';\n  @Prop({reflect: true}) public statusMessage: string;\n  @Prop({reflect: true}) public tooltipPosition: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' = 'top-start';\n\n  @Event() public soulClear: EventEmitter<void>;\n\n  @State() private showClearButton = false;\n  @State() private isPasswordRevealed = false;\n  @State() private invalid = false;\n  @Element() private hostElement: HTMLElement;\n\n  private readonly instanceId = `soul-input-wrapper-${++inputWrapperId}`;\n  private readonly INPUT_TYPE_ATTRIBUTE = 'type';\n  private readonly INPUT_TYPE_DATA_ATTRIBUTE = 'data-type';\n  private inputSlot: HTMLSlotElement;\n  private inputElement: HTMLInputElement;\n  private overlayElement: HTMLDivElement;\n  private typeObserver: MutationObserver;\n  private tooltipElement: HTMLSoulTooltipElement;\n  private overlayResizeObserver = new ResizeObserver(this.setInputRightPadding.bind(this));\n  private supportedStatuses = ['warning', 'critical'];\n  private readonly dateTimeTypes = ['date', 'month', 'week', 'time', 'datetime-local'];\n  private readonly typesWithClearButton = ['text', 'email', 'tel', 'url', 'search', 'color'];\n\n  disconnectedCallback(): void {\n    this.typeObserver?.disconnect();\n  }\n\n  componentDidRender(): void {\n    this.setTooltipTriggerElement();\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Host aria-label={this.label}>\n        <div\n          id={this.instanceId}\n          class={{\n            'soul-input-wrapper': true,\n            'soul-input-wrapper--invalid': (this.invalidStyle && this.invalid),\n            'soul-input-wrapper--warning': this.status === 'warning',\n            'soul-input-wrapper--critical': this.status === 'critical',\n            'soul-input-wrapper--readonly': this.isReadonly\n          }}>\n          {this.renderLabel()}\n          <div class=\"soul-input-wrapper__control\">\n            {this.renderTooltip()}\n            {this.renderSearchIcon()}\n            <slot onSlotchange={this.onInputSlotChange.bind(this)} ref={el => this.inputSlot = el as HTMLSlotElement}></slot>\n            {this.renderInputOverlays()}\n          </div>\n          {this.renderStatusMessage()}\n          {this.renderHelpText()}\n          {this.renderAction()}\n        </div>\n      </Host>\n    );\n  }\n\n  private initializeInput(): void {\n    this.inputElement = this.inputSlot.assignedElements()[0] as HTMLInputElement;\n    this.inputElement.addEventListener('input', this.onInput.bind(this));\n    this.inputElement.addEventListener('focus', this.setClearButtonVisibility.bind(this));\n    this.inputElement.addEventListener('blur', this.setClearButtonVisibility.bind(this));\n    this.inputElement.addEventListener('mouseleave', this.setClearButtonVisibility.bind(this));\n    this.inputElement.addEventListener('mouseenter', this.setClearButtonVisibility.bind(this));\n    if (this.inputType === 'search') {\n      this.inputElement.addEventListener('keydown', this.onKeyDown.bind(this));\n    }\n    this.overlayResizeObserver.disconnect();\n    this.overlayResizeObserver.observe(this.overlayElement);\n    this.checkInputValidity();\n    this.listenForTypeChange();\n    this.setTooltipTriggerElement();\n  }\n\n  private get isReadonly(): boolean {\n    return this.inputElement?.readOnly;\n  }\n\n  private get isPasswordType(): boolean {\n    return this.inputType === 'password' || this.inputElement?.getAttribute('data-type') === 'password';\n  }\n\n  private get isDateType(): boolean {\n    return this.dateTimeTypes.includes(this.inputType);\n  }\n\n  private get isSearchType(): boolean {\n    return this.inputType === 'search';\n  }\n\n  private get isStatusValid(): boolean {\n    return this.supportedStatuses.includes(this.status);\n  }\n\n  private get inputType(): string {\n    return this.inputElement?.type;\n  }\n\n  public get shouldRenderStatusMessage(): boolean {\n    return !this.isReadonly && ((this.isStatusValid || (this.invalidStyle && this.invalid)) && isNotEmpty(this.statusMessage));\n  }\n\n  public get shouldRenderCustomIcon(): boolean {\n    return this.isDateType && this.showCustomIconForCurrenBrowser;\n  }\n\n  public get showCustomIconForCurrenBrowser(): boolean {\n    return !navigator.userAgent.includes('Firefox');\n  }\n\n  public get shouldRenderTooltip(): boolean {\n    return this.inputOnly && (this.shouldRenderStatusMessage || isNotEmpty(this.helpText));\n  }\n\n  public get shouldRenderStatusIndicator(): boolean {\n    return !this.isReadonly && (this.isStatusValid || (this.invalidStyle && this.invalid));\n  }\n\n  public get shouldRenderClearButton(): boolean {\n    return !this.isReadonly && this.isClearSupported && this.showClearButton && this.clearButton;\n  }\n\n  public get isClearSupported(): boolean {\n    return this.typesWithClearButton.includes(this.inputType) && !this.isPasswordType;\n  }\n\n  private setTooltipTriggerElement(): void {\n    if (isDefined(this.tooltipElement)) {\n      this.tooltipElement.triggerElement = this.inputElement;\n    }\n  }\n\n  private setInputRightPadding(): void {\n    this.hostElement.style.setProperty('--soul-input-wrapper-input-padding-right', this.getOverlayElementWidth());\n  }\n\n  private getOverlayElementWidth(): string {\n    return this.overlayElement ? `${this.overlayElement.offsetWidth}px` : '0px';\n  }\n\n  private onInputSlotChange(): void {\n    if (this.inputElement !== this.inputSlot.assignedElements()[0]) {\n      this.initializeInput();\n      forceUpdate(this);\n    }\n  }\n\n  private checkInputValidity(): void {\n    this.invalid = !this.inputElement.checkValidity();\n  }\n\n  private focusInput(): void {\n    this.inputElement.focus();\n  }\n\n  private onInput(): void {\n    this.showClearButton = this.inputElement.value.length > 0;\n    this.checkInputValidity();\n  }\n\n  private onKeyDown(event: KeyboardEvent): void {\n    if (event.key === Keymap.ESC) {\n      event.preventDefault();\n      this.onClearButtonClick();\n    }\n  }\n\n  private setClearButtonVisibility(): void {\n    this.showClearButton = this.inputElement.matches(':focus') || this.inputElement.matches(':hover') || this.hostElement.matches(':focus-within') || this.overlayElement?.matches(':hover') ? this.inputElement.value.length > 0 : false;\n  }\n\n  private onClearButtonClick(): void {\n    this.inputElement.value = '';\n    this.showClearButton = false;\n    this.checkInputValidity();\n    this.focusInput();\n    this.soulClear.emit();\n  }\n\n  private onDateTimeIconClick(): void {\n    this.inputElement.focus();\n    this.inputElement.showPicker();\n  }\n\n  private onPasswordVisibilityToggle(): void {\n    if (this.inputElement.type === 'password') {\n      this.inputElement.setAttribute(this.INPUT_TYPE_DATA_ATTRIBUTE, 'password');\n      this.inputElement.setAttribute(this.INPUT_TYPE_ATTRIBUTE, 'text');\n      this.isPasswordRevealed = true;\n    } else if (this.inputElement.getAttribute(this.INPUT_TYPE_DATA_ATTRIBUTE) === 'password') {\n      this.inputElement.setAttribute(this.INPUT_TYPE_ATTRIBUTE, 'password');\n      this.inputElement.removeAttribute(this.INPUT_TYPE_DATA_ATTRIBUTE);\n      this.isPasswordRevealed = false;\n    }\n  }\n\n  private hasSlottedAction(): boolean {\n    return !!this.hostElement.querySelector('[slot=\"action\"]');\n  }\n\n  private listenForTypeChange(): void {\n    this.typeObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if(mutation.attributeName === 'type' && mutation.oldValue === 'text' && this.inputElement.type !== 'password') {\n          this.inputElement.removeAttribute(this.INPUT_TYPE_DATA_ATTRIBUTE);\n        }\n      });\n      this.isPasswordRevealed = this.inputElement.type !== 'password';\n      this.checkInputValidity();\n      forceUpdate(this);\n    });\n    this.typeObserver.observe(this.inputElement, {attributes: true, attributeOldValue : true});\n  }\n\n  private renderLabel(): JSX.Element {\n    return (this.label || this.additionalLabel) ?\n      <div class=\"soul-input-wrapper__label\">\n        <label onClick={this.focusInput.bind(this)}>{this.label}{this.renderAdditionalLabel()}</label>\n      </div> : '';\n  }\n\n  private renderAdditionalLabel(): JSX.Element {\n    return this.additionalLabel ?\n      <span class=\"soul-input-wrapper__additional-label\">{this.additionalLabel}</span> : '';\n  }\n\n  private renderTooltip(): JSX.Element {\n    return this.shouldRenderTooltip ?\n      <soul-tooltip text={this.shouldRenderStatusMessage ? this.statusMessage : this.helpText}\n                    status={this.status ? this.status : (this.invalid && this.invalidStyle) ? 'critical' : undefined} position={this.tooltipPosition}\n                    ref={el => this.tooltipElement = el as HTMLSoulTooltipElement}></soul-tooltip> : '';\n  }\n\n  private renderSearchIcon(): JSX.Element {\n    return this.isSearchType ? <soul-icon name=\"search\" size=\"s\" class=\"soul-input-wrapper__search-icon\"></soul-icon> : '';\n  }\n\n  private renderInputOverlays(): JSX.Element {\n    return <div class={{\n      'soul-input-wrapper__input-overlays': true,\n      'soul-input-wrapper__input-overlays--compact': !this.showCustomIconForCurrenBrowser && this.shouldRenderStatusIndicator && this.inputType?.includes('date')\n    }} data-type={this.inputType} ref={el => this.overlayElement = el as HTMLDivElement}>\n      {this.renderClearButton()}\n      {this.renderPasswordVisibilityToggle()}\n      {this.renderCalendarIcon()}\n      {this.renderStatusIndicator()}\n    </div>;\n  }\n\n  private renderPasswordVisibilityToggle(): JSX.Element {\n    return !this.isReadonly && this.isPasswordType ?\n      <button class=\"soul-input-wrapper__password-toggle soul-button soul-button--ghost soul-button--no-space soul-button--icon-only\"\n              onClick={this.onPasswordVisibilityToggle.bind(this)}>\n        <div class=\"soul-button__icon\">\n          <soul-icon name={this.isPasswordRevealed ? 'hide' : 'show'} size=\"s\"></soul-icon>\n        </div>\n      </button> : '';\n  }\n\n  private renderStatusIndicator(): JSX.Element {\n    return this.shouldRenderStatusIndicator ?\n      <soul-indicator size=\"s\" type={this.status === 'warning' && !this.invalid ? 'warning' : 'critical'}></soul-indicator> : '';\n  }\n\n  private renderCalendarIcon(): JSX.Element {\n    return !this.isReadonly && this.shouldRenderCustomIcon ?\n      <button class=\" soul-button soul-button--ghost soul-button--no-space soul-button--icon-only\" onClick={this.onDateTimeIconClick.bind(this)}>\n        <div class=\"soul-button__icon\">\n          <soul-icon size=\"m\" name={this.inputType === 'time' ? 'time' : 'calendar'}></soul-icon>\n        </div>\n      </button>\n      : '';\n  }\n\n  private renderClearButton(): JSX.Element {\n    return this.shouldRenderClearButton ?\n      <button class=\"soul-input-wrapper__clear soul-button soul-button--ghost soul-button--no-space soul-button--icon-only\" onClick={this.onClearButtonClick.bind(this)}\n              onBlur={this.setClearButtonVisibility.bind(this)}>\n        <div class=\"soul-button__icon\">\n          <soul-icon name=\"close\" size=\"s\" color=\"reduced\"></soul-icon>\n        </div>\n      </button> : '';\n  }\n\n  private renderStatusMessage(): JSX.Element {\n    return this.shouldRenderStatusMessage ?\n      <div class=\"soul-input-wrapper__status-message\">{this.statusMessage}</div> : '';\n  }\n\n  private renderHelpText(): JSX.Element {\n    return !this.isReadonly && this.helpText ?\n      <div class=\"soul-input-wrapper__help\">{this.helpText}</div> : '';\n  }\n\n  private renderAction(): JSX.Element {\n    return !this.isReadonly && this.hasSlottedAction() ?\n      <div class=\"soul-input-wrapper__action\">\n        <slot name=\"action\"></slot>\n      </div> : '';\n  }\n\n}\n\nlet inputWrapperId = 0;\n"],"mappings":"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"}