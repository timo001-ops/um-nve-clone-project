{"version":3,"names":["soulAvatarCss","SoulAvatar","this","supportedSizes","supportedColors","maxColorIndex","supportedStatuses","statusHelper","StatusHelper","sizeHelper","SizeHelper","componentWillLoad","updateAriaLabel","sizeChange","newValue","validateSize","statusChange","validateStatus","colorChange","validateColors","label","accessibilityLabel","name","isNotEmpty","additionalText","hasStatusWithMessage","statusMessage","ariaLabel","render","thumbnailType","getThumbnailType","avatarColor","getAvatarColor","imageError","h","Host","class","title","thumbnailOnly","onError","src","imageUrl","alt","icon","getOrCalculateChars","hasStatus","type","status","border","hasTextContent","ref","el","contentElement","onMouseOver","bind","e","target","scrollWidth","offsetWidth","_a","textContent","color","isColorInRange","getColorIndexFromLetters","chars","getColorIndexFromChars","trim","toUpperCase","firstCharCode","charCodeAt","getCharsFromContent","getNameInitials","getCharsFromAdditionalText","initials","split","map","token","slice","length","join","isDefined","includes","console","debug","colorNumber","parseInt","isNaN","isValidStatus"],"sources":["./src/components/soul-avatar/soul-avatar.scss?tag=soul-avatar&encapsulation=shadow","./src/components/soul-avatar/soul-avatar.tsx"],"sourcesContent":["@use 'modules/core';\n@use \"modules/components/indicator\";\n\n$_indicator-position: (\"bottom\": 20%, \"right\": 14%);\n$_indicator_size: 45%;\n\n:host {\n  display: block;\n}\n\n.soul-avatar {\n  @include core.flexbox-inline-row();\n  align-items: center;\n  vertical-align: middle;\n  width: 100%;\n}\n\n.soul-avatar__thumbnail {\n  width: var(--_soul-avatar-thumbnail-size, #{core.$soul-space-unit-xl});\n  height: var(--_soul-avatar-thumbnail-size, #{core.$soul-space-unit-xl});\n  color: var(--_soul-avatar-thumbnail-color, #{core.$soul-color-text-on-dark});\n  user-select: none;\n  cursor: inherit;\n  position: relative;\n  flex-shrink: 0;\n}\n\n.soul-avatar__icon,\n.soul-avatar__chars,\n.soul-avatar__image {\n  @include core.flexbox-row();\n  @include core.flexbox-center-horizontally-and-vertically();\n  width: 100%;\n  height: 100%;\n  box-shadow: core.$soul-shadow-border-thin;\n  border-radius: var(--_soul-avatar-thumbnail-border-radius, #{core.$soul-border-radius-circle});\n}\n\n.soul-avatar__image {\n  object-fit: cover;\n  object-position: center center;\n  background-color: core.$soul-color-background-primary; //To fix jagged border radius/box-shadow\n}\n\n.soul-avatar__icon,\n.soul-avatar__chars {\n  background-color: var(--_soul-avatar-thumbnail-background-color, #{core.$soul-color-brand-primary-500});\n}\n\n.soul-avatar__chars {\n  white-space: nowrap;\n  text-transform: uppercase;\n  overflow: hidden;\n  font-size: var(--_soul-avatar-chars-font-size);\n  line-height: var(--_soul-avatar-chars-line-height);\n}\n\n.soul-avatar__icon {\n  soul-icon {\n    --soul-icon-size: var(--_soul-avatar-icon-size, #{core.get-font-size(core.$soul-2-xs )});\n  }\n}\n\n.soul-avatar__content {\n  @include core.flexbox-column();\n  justify-content: center;\n  margin: var(--_soul-avatar-content-margin, #{core.$soul-space-inline-left-2-xs});\n  overflow: hidden;\n}\n\n.soul-avatar__additional-text,\n.soul-avatar__status-message {\n  font-size: var(--_soul-avatar-additional-text-font-size);\n  line-height: var(--_soul-avatar-additional-text-line-height);\n  @include core.truncate();\n}\n\n.soul-avatar__additional-text {\n  color: var(--_soul-avatar-additional-text-color, #{core.$soul-color-text-reduced-on-light});\n}\n\n.soul-avatar__name {\n  color: var(--_soul-avatar-name-color, currentColor);\n  font-size: var(--_soul-avatar-name-font-size);\n  line-height: var(--_soul-avatar-name-line-height);\n  @include core.truncate();\n}\n\n.soul-avatar__indicator {\n  bottom: map-get($_indicator-position, \"bottom\");\n  right: map-get($_indicator-position, \"right\");\n  transform: translate(50%, 50%);\n  position: absolute;\n  width: $_indicator_size;\n  height: $_indicator_size;\n}\n\nsoul-indicator {\n  --soul-indicator-size: 100%;\n}\n\n.soul-avatar-color--primary {\n  --_soul-avatar-thumbnail-background-color: #{core.$soul-color-background-avatar-primary};\n}\n\n.soul-avatar-color--neutral {\n  --_soul-avatar-thumbnail-background-color: #{core.$soul-color-background-avatar-neutral};\n}\n\n$_avatar-colors: (\n  core.$soul-color-background-avatar-1,\n  core.$soul-color-background-avatar-2,\n  core.$soul-color-background-avatar-3,\n  core.$soul-color-background-avatar-4,\n  core.$soul-color-background-avatar-5,\n  core.$soul-color-background-avatar-6,\n  core.$soul-color-background-avatar-7,\n  core.$soul-color-background-avatar-8,\n  core.$soul-color-background-avatar-9,\n  core.$soul-color-background-avatar-10,\n  core.$soul-color-background-avatar-11,\n  core.$soul-color-background-avatar-12,\n  core.$soul-color-background-avatar-13\n);\n\n@for $index from 1 through length($_avatar-colors) {\n  $avatar-color: nth($_avatar-colors, $index);\n  .soul-avatar-color--#{$index} {\n    --_soul-avatar-thumbnail-background-color: #{$avatar-color};\n  }\n}\n\n:host([status=\"warning\"]) {\n  .soul-avatar__status-message {\n    color: var(--_soul-avatar-status-message-color, #{core.$soul-color-text-indicator-warning});\n  }\n}\n\n:host([status=\"positive\"]) {\n  .soul-avatar__status-message {\n    color: var(--_soul-avatar-status-message-color, #{core.$soul-color-text-indicator-positive});\n  }\n}\n\n:host([status=\"waiting\"]),\n:host([status=\"locked\"]) {\n  .soul-avatar__status-message {\n    color: var(--_soul-avatar-additional-text-color, #{core.$soul-color-text-reduced-on-light});\n  }\n}\n\n:host([muted]:not([muted=\"false\"])) {\n  .soul-avatar {\n    --_soul-avatar-thumbnail-background-color: #{core.$soul-color-background-disabled};\n    --_soul-avatar-additional-text-color: #{core.$soul-color-text-disabled};\n    --_soul-avatar-status-message-color: #{core.$soul-color-text-disabled};\n    --_soul-avatar-name-color: #{core.$soul-color-text-disabled};\n    --_soul-avatar-thumbnail-color: #{core.$soul-color-text-disabled};\n  }\n\n  .soul-avatar__image,\n  .soul-avatar__indicator, {\n    filter: grayscale(100%);\n    opacity: core.$opacity-l;\n  }\n}\n\n:host([type='entity']) {\n  .soul-avatar {\n    --_soul-avatar-thumbnail-border-radius: #{core.$soul-border-radius-m};\n  }\n}\n\n:host([size='s']) {\n\n  &:host([type='entity']) {\n    .soul-avatar {\n      --_soul-avatar-thumbnail-border-radius: #{core.$soul-border-radius-s};\n    }\n  }\n\n  .soul-avatar {\n    --_soul-avatar-thumbnail-size: #{core.$soul-space-unit-m};\n    --_soul-avatar-content-margin: #{core.$soul-space-inline-left-2-xs};\n    --_soul-avatar-chars-font-size: #{core.get-font-size(core.$soul-2-xs)};\n    --_soul-avatar-chars-line-height: #{core.get-line-height(core.$soul-2-xs)};\n    --_soul-avatar-additional-text-font-size: #{core.get-font-size(core.$soul-xs)};\n    --_soul-avatar-additional-text-line-height: #{core.get-line-height(core.$soul-2-xs)};\n    --_soul-avatar-name-font-size: #{core.get-font-size(core.$soul-s)};\n    --_soul-avatar-name-line-height: #{core.get-line-height(core.$soul-s)};\n    --_soul-avatar-icon-size: #{core.get-font-size(core.$soul-2-xs)};\n  }\n}\n\n:host,\n:host([size='m']) {\n  .soul-avatar {\n    --_soul-avatar-thumbnail-size: #{core.$soul-space-unit-xl};\n    --_soul-avatar-content-margin: #{core.$soul-space-inline-left-xs};\n    --_soul-avatar-chars-font-size: #{core.get-font-size(core.$soul-s)};\n    --_soul-avatar-chars-line-height: #{core.get-line-height(core.$soul-s)};\n    --_soul-avatar-additional-text-font-size: #{core.get-font-size(core.$soul-xs)};\n    --_soul-avatar-additional-text-line-height: #{core.get-line-height(core.$soul-xs)};\n    --_soul-avatar-name-font-size: #{core.get-font-size(core.$soul-s)};\n    --_soul-avatar-name-line-height: #{core.get-line-height(core.$soul-s)};\n    --_soul-avatar-icon-size: #{core.get-font-size(core.$soul-m)};\n  }\n}\n\n:host([size='l']) {\n  .soul-avatar {\n    --_soul-avatar-thumbnail-size: #{core.$soul-space-unit-2-xl};\n    --_soul-avatar-content-margin: #{core.$soul-space-inline-left-s};\n    --_soul-avatar-chars-font-size: #{core.get-font-size(core.$soul-l)};\n    --_soul-avatar-chars-line-height: #{core.get-line-height(core.$soul-l)};\n    --_soul-avatar-additional-text-font-size: #{core.get-font-size(core.$soul-m)};\n    --_soul-avatar-additional-text-line-height: #{core.get-line-height(core.$soul-m)};\n    --_soul-avatar-name-font-size: #{core.get-font-size(core.$soul-l)};\n    --_soul-avatar-name-line-height: #{core.get-line-height(core.$soul-l)};\n    --_soul-avatar-icon-size: #{core.get-font-size(core.$soul-xl)};\n  }\n}\n\n:host([size='xl']) {\n  .soul-avatar {\n    --_soul-avatar-thumbnail-size: #{2 * core.$soul-space-unit-2-xl};\n    --_soul-avatar-content-margin: #{core.$soul-space-inline-left-m};\n    --_soul-avatar-chars-font-size: #{core.get-font-size(core.$soul-3-xl)};\n    --_soul-avatar-chars-line-height: #{core.get-line-height(core.$soul-3-xl)};\n    --_soul-avatar-additional-text-font-size: #{core.get-font-size(core.$soul-2-xl)};\n    --_soul-avatar-additional-text-line-height: #{core.get-line-height(core.$soul-2-xl)};\n    --_soul-avatar-name-font-size: #{core.get-font-size(core.$soul-3-xl)};\n    --_soul-avatar-name-line-height: #{core.get-line-height(core.$soul-3-xl)};\n    --_soul-avatar-icon-size: #{core.get-font-size(core.$soul-3-xl)};\n  }\n}\n","import {Component, ComponentWillLoad, h, Host, Prop, State, Watch} from '@stencil/core';\nimport {isDefined, isNotEmpty} from '../../utils/utils';\nimport {StatusHelper} from '../../services/StatusHelper';\nimport {SizeHelper} from '../../services/SizeHelper';\n\n@Component({\n  tag: 'soul-avatar',\n  styleUrl: 'soul-avatar.scss',\n  shadow: true,\n})\nexport class SoulAvatar implements ComponentWillLoad {\n\n  @Prop({reflect: true}) type: 'user' | 'entity' = 'user';\n  @Prop({reflect: true}) size: 's' | 'm' | 'l' | 'xl' = 'm';\n  @Prop({reflect: true}) status?: 'positive' | 'waiting' | 'locked' | 'warning';\n  @Prop({reflect: true}) imageUrl: string;\n  @Prop({reflect: true}) icon: string;\n  @Prop({reflect: true}) chars: string;\n  @Prop({reflect: true}) name: string;\n  @Prop({reflect: true}) additionalText: string;\n  @Prop({reflect: true}) thumbnailOnly: boolean = false;\n  @Prop({reflect: true}) color: 'auto' | 'primary' | 'neutral' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 = 'auto';\n  @Prop({reflect: true}) accessibilityLabel: string;\n  @Prop({reflect: true}) muted: boolean = false;\n  @Prop({reflect: true}) statusMessage: string;\n\n  private ariaLabel: string;\n  private supportedSizes = ['s', 'm', 'l', 'xl'];\n  private supportedColors = ['auto', 'primary', 'neutral'];\n  private maxColorIndex = 13;\n  private supportedStatuses = ['positive', 'waiting', 'locked', 'warning'];\n  private statusHelper = new StatusHelper();\n  private sizeHelper = new SizeHelper();\n  private contentElement: HTMLElement;\n\n  @State()\n  private imageError = false;\n\n  public componentWillLoad(): void {\n    this.updateAriaLabel();\n  }\n\n  @Watch('size')\n  public sizeChange(newValue: string): void {\n    this.sizeHelper.validateSize(this.supportedSizes, newValue);\n  }\n\n  @Watch('status')\n  public statusChange(newValue: string): void {\n    this.statusHelper.validateStatus(this.supportedStatuses, newValue);\n  }\n\n  @Watch('color')\n  public colorChange(newValue: string): void {\n    this.validateColors(newValue);\n  }\n\n  @Watch('accessibilityLabel')\n  @Watch('name')\n  @Watch('additionalText')\n  @Watch('thumbnailOnly')\n  public updateAriaLabel(): void {\n    let label = this.accessibilityLabel || this.name || '';\n\n    if (!this.accessibilityLabel) {\n      if (isNotEmpty(this.additionalText) && !this.hasStatusWithMessage()) {\n        label += `. ${this.additionalText}`;\n      }\n      if (this.hasStatusWithMessage()) {\n        label += `. ${this.statusMessage}`;\n      }\n    }\n\n    this.ariaLabel = label;\n  }\n\n  render() {\n    const thumbnailType: ThumbnailType = this.getThumbnailType();\n    const avatarColor: Omit<ColorType, 'auto'> = this.getAvatarColor();\n    this.imageError = false;\n    return (\n      <Host aria-label={this.ariaLabel}>\n        <div class={`soul-avatar soul-avatar-color--${avatarColor}`}>\n          <div class=\"soul-avatar__thumbnail soul-tooltip\" title={this.thumbnailOnly ? this.ariaLabel : ''}>\n            {thumbnailType === 'image' ? <img onError={() => this.imageError = true} class=\"soul-avatar__image\" src={this.imageUrl} alt=\"\"/> : ''}\n            {thumbnailType === 'icon' ? <div class=\"soul-avatar__icon\">\n              <soul-icon name={this.icon}></soul-icon>\n            </div> : ''\n            }\n            {thumbnailType === 'chars' ?\n              <div class=\"soul-avatar__chars\">\n                <abbr>{this.getOrCalculateChars()}</abbr>\n              </div> : ''\n            }\n            {this.hasStatus() ?\n              <div class=\"soul-avatar__indicator\">\n                <soul-indicator type={this.status} border></soul-indicator>\n              </div> : ''\n            }\n          </div>\n          {!this.thumbnailOnly && this.hasTextContent() ?\n            <div class=\"soul-avatar__content\" ref={el => this.contentElement = el as HTMLElement}>\n              {isNotEmpty(this.name) ?\n                <span class=\"soul-avatar__name\" onMouseOver={this.onMouseOver.bind(this)}>{this.name}</span> : ''\n              }\n              {isNotEmpty(this.additionalText) && !this.hasStatusWithMessage() ?\n                <span class=\"soul-avatar__additional-text\" onMouseOver={this.onMouseOver.bind(this)}>{this.additionalText}</span> : ''\n              }\n              {this.hasStatusWithMessage() ?\n                <span class=\"soul-avatar__status-message\" onMouseOver={this.onMouseOver.bind(this)}>{this.statusMessage}</span> : ''\n              }\n            </div> : ''\n          }\n        </div>\n      </Host>\n    );\n  }\n\n  private onMouseOver(e: MouseEvent): void {\n    const target = e.target as HTMLElement;\n\n    if (target.scrollWidth > this.contentElement.offsetWidth) {\n      target.title = target.textContent ?? '';\n    } else {\n      target.title = '';\n    }\n  }\n\n  private getAvatarColor(): Omit<ColorType, 'auto'> {\n    if (this.color === 'primary' || this.color === 'neutral' || this.isColorInRange(this.color)) {\n      return this.color;\n    }\n    return this.getColorIndexFromLetters();\n  }\n\n  private getColorIndexFromLetters(): Omit<ColorType, 'auto'> {\n    const chars = this.getOrCalculateChars();\n    return isNotEmpty(chars) ? this.getColorIndexFromChars(chars.trim().toUpperCase()) : 'primary';\n  }\n\n  private getColorIndexFromChars(chars: string): ColorIndex {\n    const firstCharCode = chars.charCodeAt(0);\n    return (firstCharCode % this.maxColorIndex) + 1 as ColorIndex;\n  }\n\n  private getThumbnailType(): ThumbnailType {\n    if (isNotEmpty(this.imageUrl) && !this.imageError) {\n      return 'image';\n    }\n    if (isNotEmpty(this.icon)) {\n      return 'icon';\n    }\n    return 'chars';\n  }\n\n  private getOrCalculateChars(): string | null {\n    return this.chars ? this.chars.trim() : this.getCharsFromContent();\n  }\n\n  private getCharsFromContent(): string | null {\n    return this.name ? this.getNameInitials(this.name) : this.getCharsFromAdditionalText();\n  }\n\n  private getNameInitials(name: string): string {\n    const initials = name.split(' ').map(token => token.slice(0, 1));\n    return initials.length > 1 ? initials.join('').slice(0, 3) : name.slice(0, 2);\n  }\n\n  private getCharsFromAdditionalText(): string | null {\n    return this.additionalText ? this.getNameInitials(this.additionalText) : null;\n  }\n\n  private validateColors(newValue: string): void {\n    if (isDefined(this.color) && !this.supportedColors.includes(newValue) && !this.isColorInRange(newValue)) {\n      console.debug(`Color ${newValue} not supported. Supported colors: ${this.supportedColors.join(', ')} and a index between 1 and 13`);\n    }\n  }\n\n  private isColorInRange(color: string | number): boolean {\n    const colorNumber = parseInt(color as string);\n    return !isNaN(colorNumber) && colorNumber > 0 && colorNumber <= this.maxColorIndex;\n  }\n\n  private hasTextContent(): boolean {\n    return isNotEmpty(this.name) || isNotEmpty(this.additionalText) || this.hasStatusWithMessage();\n  }\n\n  private hasStatus(): boolean {\n    return isDefined(this.status) && this.statusHelper.isValidStatus(this.supportedStatuses, this.status);\n  }\n\n  private hasStatusWithMessage(): boolean {\n    return this.hasStatus() && isNotEmpty(this.statusMessage);\n  }\n}\n\ntype ThumbnailType = 'icon' | 'image' | 'chars';\ntype ColorType = 'auto' | 'primary' | 'neutral' | ColorIndex;\ntype ColorIndex = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13\n"],"mappings":"qKAAA,MAAMA,EAAgB,k6lB,MCUTC,EAAU,M,yBAiBbC,KAAAC,eAAiB,CAAC,IAAK,IAAK,IAAK,MACjCD,KAAAE,gBAAkB,CAAC,OAAQ,UAAW,WACtCF,KAAAG,cAAgB,GAChBH,KAAAI,kBAAoB,CAAC,WAAY,UAAW,SAAU,WACtDJ,KAAAK,aAAe,IAAIC,EACnBN,KAAAO,WAAa,IAAIC,E,UApBwB,O,UACK,I,4JAON,M,WACuE,O,6CAE/E,M,6CAanB,K,CAEdC,oBACLT,KAAKU,iB,CAIAC,WAAWC,GAChBZ,KAAKO,WAAWM,aAAab,KAAKC,eAAgBW,E,CAI7CE,aAAaF,GAClBZ,KAAKK,aAAaU,eAAef,KAAKI,kBAAmBQ,E,CAIpDI,YAAYJ,GACjBZ,KAAKiB,eAAeL,E,CAOfF,kBACL,IAAIQ,EAAQlB,KAAKmB,oBAAsBnB,KAAKoB,MAAQ,GAEpD,IAAKpB,KAAKmB,mBAAoB,CAC5B,GAAIE,EAAWrB,KAAKsB,kBAAoBtB,KAAKuB,uBAAwB,CACnEL,GAAS,KAAKlB,KAAKsB,gB,CAErB,GAAItB,KAAKuB,uBAAwB,CAC/BL,GAAS,KAAKlB,KAAKwB,e,EAIvBxB,KAAKyB,UAAYP,C,CAGnBQ,SACE,MAAMC,EAA+B3B,KAAK4B,mBAC1C,MAAMC,EAAuC7B,KAAK8B,iBAClD9B,KAAK+B,WAAa,MAClB,OACEC,EAACC,EAAI,cAAajC,KAAKyB,WACrBO,EAAA,OAAKE,MAAO,kCAAkCL,KAC5CG,EAAA,OAAKE,MAAM,sCAAsCC,MAAOnC,KAAKoC,cAAgBpC,KAAKyB,UAAY,IAC3FE,IAAkB,QAAUK,EAAA,OAAKK,QAAS,IAAMrC,KAAK+B,WAAa,KAAMG,MAAM,qBAAqBI,IAAKtC,KAAKuC,SAAUC,IAAI,KAAO,GAClIb,IAAkB,OAASK,EAAA,OAAKE,MAAM,qBACrCF,EAAA,aAAWZ,KAAMpB,KAAKyC,QACf,GAERd,IAAkB,QACjBK,EAAA,OAAKE,MAAM,sBACTF,EAAA,YAAOhC,KAAK0C,wBACL,GAEV1C,KAAK2C,YACJX,EAAA,OAAKE,MAAM,0BACTF,EAAA,kBAAgBY,KAAM5C,KAAK6C,OAAQC,OAAM,QAClC,KAGX9C,KAAKoC,eAAiBpC,KAAK+C,iBAC3Bf,EAAA,OAAKE,MAAM,uBAAuBc,IAAKC,GAAMjD,KAAKkD,eAAiBD,GAChE5B,EAAWrB,KAAKoB,MACfY,EAAA,QAAME,MAAM,oBAAoBiB,YAAanD,KAAKmD,YAAYC,KAAKpD,OAAQA,KAAKoB,MAAe,GAEhGC,EAAWrB,KAAKsB,kBAAoBtB,KAAKuB,uBACxCS,EAAA,QAAME,MAAM,+BAA+BiB,YAAanD,KAAKmD,YAAYC,KAAKpD,OAAQA,KAAKsB,gBAAyB,GAErHtB,KAAKuB,uBACJS,EAAA,QAAME,MAAM,8BAA8BiB,YAAanD,KAAKmD,YAAYC,KAAKpD,OAAQA,KAAKwB,eAAwB,IAE7G,I,CAOX2B,YAAYE,G,MAClB,MAAMC,EAASD,EAAEC,OAEjB,GAAIA,EAAOC,YAAcvD,KAAKkD,eAAeM,YAAa,CACxDF,EAAOnB,OAAQsB,EAAAH,EAAOI,eAAW,MAAAD,SAAA,EAAAA,EAAI,E,KAChC,CACLH,EAAOnB,MAAQ,E,EAIXL,iBACN,GAAI9B,KAAK2D,QAAU,WAAa3D,KAAK2D,QAAU,WAAa3D,KAAK4D,eAAe5D,KAAK2D,OAAQ,CAC3F,OAAO3D,KAAK2D,K,CAEd,OAAO3D,KAAK6D,0B,CAGNA,2BACN,MAAMC,EAAQ9D,KAAK0C,sBACnB,OAAOrB,EAAWyC,GAAS9D,KAAK+D,uBAAuBD,EAAME,OAAOC,eAAiB,S,CAG/EF,uBAAuBD,GAC7B,MAAMI,EAAgBJ,EAAMK,WAAW,GACvC,OAAQD,EAAgBlE,KAAKG,cAAiB,C,CAGxCyB,mBACN,GAAIP,EAAWrB,KAAKuC,YAAcvC,KAAK+B,WAAY,CACjD,MAAO,O,CAET,GAAIV,EAAWrB,KAAKyC,MAAO,CACzB,MAAO,M,CAET,MAAO,O,CAGDC,sBACN,OAAO1C,KAAK8D,MAAQ9D,KAAK8D,MAAME,OAAShE,KAAKoE,qB,CAGvCA,sBACN,OAAOpE,KAAKoB,KAAOpB,KAAKqE,gBAAgBrE,KAAKoB,MAAQpB,KAAKsE,4B,CAGpDD,gBAAgBjD,GACtB,MAAMmD,EAAWnD,EAAKoD,MAAM,KAAKC,KAAIC,GAASA,EAAMC,MAAM,EAAG,KAC7D,OAAOJ,EAASK,OAAS,EAAIL,EAASM,KAAK,IAAIF,MAAM,EAAG,GAAKvD,EAAKuD,MAAM,EAAG,E,CAGrEL,6BACN,OAAOtE,KAAKsB,eAAiBtB,KAAKqE,gBAAgBrE,KAAKsB,gBAAkB,I,CAGnEL,eAAeL,GACrB,GAAIkE,EAAU9E,KAAK2D,SAAW3D,KAAKE,gBAAgB6E,SAASnE,KAAcZ,KAAK4D,eAAehD,GAAW,CACvGoE,QAAQC,MAAM,SAASrE,sCAA6CZ,KAAKE,gBAAgB2E,KAAK,qC,EAI1FjB,eAAeD,GACrB,MAAMuB,EAAcC,SAASxB,GAC7B,OAAQyB,MAAMF,IAAgBA,EAAc,GAAKA,GAAelF,KAAKG,a,CAG/D4C,iBACN,OAAO1B,EAAWrB,KAAKoB,OAASC,EAAWrB,KAAKsB,iBAAmBtB,KAAKuB,sB,CAGlEoB,YACN,OAAOmC,EAAU9E,KAAK6C,SAAW7C,KAAKK,aAAagF,cAAcrF,KAAKI,kBAAmBJ,KAAK6C,O,CAGxFtB,uBACN,OAAOvB,KAAK2C,aAAetB,EAAWrB,KAAKwB,c"}