{"version":3,"names":["OptionHelper","constructor","onSelectedChange","slots","this","slotObserver","MutationObserver","cloneSlotsContent","reduce","previousValue","currentSlot","concat","assignedElements","map","elementToClone","clonedNode","cloneNode","setAttribute","name","onSelectChange","selected","disconnect","forEach","slot","removeEventListener","onSlotChange","bind","observeSlotElements","addEventListener","slottedElement","observe","childList","subtree","attributes","characterData","throttle","throttledFunction","delay","isThrottling","args","setTimeout"],"sources":["./src/services/OptionHelper.ts","./src/utils/Throttle.ts"],"sourcesContent":["export class OptionHelper {\n\n  private slotObserver: MutationObserver;\n\n  constructor(private onSelectedChange: () => void, private slots: HTMLSlotElement[]) {\n    this.slotObserver = new MutationObserver(onSelectedChange);\n  }\n\n  public cloneSlotsContent(): HTMLElement[] {\n    return this.slots.reduce((previousValue, currentSlot) => {\n      return previousValue.concat(currentSlot.assignedElements().map(elementToClone => {\n        const clonedNode = elementToClone.cloneNode(true) as HTMLElement;\n        clonedNode.setAttribute('slot', currentSlot.name);\n        return clonedNode;\n      }));\n    }, [] as HTMLElement[]);\n  }\n\n  public onSelectChange(selected: boolean): void {\n    this.slotObserver.disconnect();\n    this.slots.forEach(slot => {\n      slot?.removeEventListener('slotchange', this.onSlotChange.bind(this));\n      slot?.removeEventListener('slotchange', this.onSelectedChange);\n    });\n    if (selected) {\n      this.observeSlotElements();\n      this.slots.forEach(slot => {\n        slot?.addEventListener('slotchange', this.onSlotChange.bind(this));\n        slot?.addEventListener('slotchange', this.onSelectedChange);\n      });\n    }\n  }\n\n  public disconnect() {\n    this.slotObserver.disconnect();\n  }\n\n  private observeSlotElements() {\n    this.slots.forEach(slot => slot.assignedElements()\n      .forEach((slottedElement) => this.slotObserver.observe(slottedElement, {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true\n      })));\n  }\n\n  private onSlotChange() {\n    this.slotObserver.disconnect();\n    this.observeSlotElements();\n  }\n\n}\n","export function throttle(throttledFunction: (...args) => void, delay: number) {\n  let isThrottling = false;\n\n  return function (...args: any[]) {\n    if (!isThrottling) {\n      throttledFunction(...args);\n      isThrottling = true;\n      setTimeout(function () {\n        isThrottling = false;\n      }, delay);\n    }\n  };\n}\n"],"mappings":"MAAaA,EAIXC,YAAoBC,EAAsCC,GAAtCC,KAAAF,mBAAsCE,KAAAD,QACxDC,KAAKC,aAAe,IAAIC,iBAAiBJ,E,CAGpCK,oBACL,OAAOH,KAAKD,MAAMK,QAAO,CAACC,EAAeC,IAChCD,EAAcE,OAAOD,EAAYE,mBAAmBC,KAAIC,IAC7D,MAAMC,EAAaD,EAAeE,UAAU,MAC5CD,EAAWE,aAAa,OAAQP,EAAYQ,MAC5C,OAAOH,CAAU,MAElB,G,CAGEI,eAAeC,GACpBhB,KAAKC,aAAagB,aAClBjB,KAAKD,MAAMmB,SAAQC,IACjBA,IAAI,MAAJA,SAAI,SAAJA,EAAMC,oBAAoB,aAAcpB,KAAKqB,aAAaC,KAAKtB,OAC/DmB,IAAI,MAAJA,SAAI,SAAJA,EAAMC,oBAAoB,aAAcpB,KAAKF,iBAAiB,IAEhE,GAAIkB,EAAU,CACZhB,KAAKuB,sBACLvB,KAAKD,MAAMmB,SAAQC,IACjBA,IAAI,MAAJA,SAAI,SAAJA,EAAMK,iBAAiB,aAAcxB,KAAKqB,aAAaC,KAAKtB,OAC5DmB,IAAI,MAAJA,SAAI,SAAJA,EAAMK,iBAAiB,aAAcxB,KAAKF,iBAAiB,G,EAK1DmB,aACLjB,KAAKC,aAAagB,Y,CAGZM,sBACNvB,KAAKD,MAAMmB,SAAQC,GAAQA,EAAKX,mBAC7BU,SAASO,GAAmBzB,KAAKC,aAAayB,QAAQD,EAAgB,CACrEE,UAAW,KACXC,QAAS,KACTC,WAAY,KACZC,cAAe,U,CAIbT,eACNrB,KAAKC,aAAagB,aAClBjB,KAAKuB,qB,WCjDOQ,EAASC,EAAsCC,GAC7D,IAAIC,EAAe,MAEnB,OAAO,YAAaC,GAClB,IAAKD,EAAc,CACjBF,KAAqBG,GACrBD,EAAe,KACfE,YAAW,WACTF,EAAe,K,GACdD,E,EAGT,Q"}