{"version":3,"names":["soulTableWrapperCss","SoulTableWrapper","this","breakpoints","componentDidLoad","setBreakpoints","resizeObserver","ResizeObserver","entries","checkSize","contentRect","width","observe","hostElement","disconnectedCallback","disconnect","onChange","clientWidth","render","h","Host","ref","el","tableSlot","breakpointsKeys","getBreakpointsKeys","buildDescendingOrderBreakpoints","breakpointKeys","xs","s","m","l","xl","map","index","size","filter","Number","isNaN","reverse","newSize","reduce","currentSize","breakpoint","updateSizeClass","removeSizeClass","isBreakpointKey","addSizeClass","soulTableSizeChange","emit","soulTableFullSize","toAdd","assignedElements","forEach","slotted","classList","add","getClassForSize","toRemove","remove","breakpointKey","some","key"],"sources":["./src/components/soul-table-wrapper/soul-table-wrapper.scss?tag=soul-table-wrapper&encapsulation=shadow","./src/components/soul-table-wrapper/soul-table-wrapper.tsx"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n  height: 100%;\n  overflow-y: auto;\n}\n","import {Component, ComponentInterface, Element, Event, EventEmitter, h, Host, Prop, Watch} from '@stencil/core';\n\n@Component({\n  tag: 'soul-table-wrapper',\n  styleUrl: 'soul-table-wrapper.scss',\n  shadow: true,\n})\nexport class SoulTableWrapper implements ComponentInterface {\n\n  @Prop({reflect: true}) public xs: number;\n  @Prop({reflect: true}) public s: number;\n  @Prop({reflect: true}) public m: number;\n  @Prop({reflect: true}) public l: number;\n  @Prop({reflect: true}) public xl: number;\n\n  @Event() public soulTableSizeChange: EventEmitter<'xs' | 's' | 'm' | 'l' | 'xl'>;\n  @Event() public soulTableFullSize: EventEmitter<void>;\n\n  @Element() private hostElement: HTMLElement;\n  private resizeObserver: ResizeObserver;\n  private currentSize: TableSizes;\n  private breakpoints: TableBreakpoint[] = [];\n  private tableSlot: HTMLSlotElement;\n\n\n  componentDidLoad() {\n    this.setBreakpoints();\n    this.resizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) => this.checkSize(entries[0].contentRect.width));\n    this.resizeObserver.observe(this.hostElement);\n  }\n\n  public disconnectedCallback() {\n    this.resizeObserver.disconnect();\n  }\n\n  @Watch('xs')\n  @Watch('s')\n  @Watch('m')\n  @Watch('l')\n  @Watch('xl')\n  public onChange(): void {\n    this.setBreakpoints();\n    this.checkSize(this.hostElement.clientWidth);\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot ref={el => this.tableSlot = el as HTMLSlotElement}></slot>\n      </Host>\n    );\n  }\n\n  private setBreakpoints(): void {\n    const breakpointsKeys: TableBreakpointKeys[] = this.getBreakpointsKeys();\n    this.breakpoints = this.buildDescendingOrderBreakpoints(breakpointsKeys);\n  }\n\n  private buildDescendingOrderBreakpoints(breakpointKeys: TableBreakpointKeys[]): TableBreakpoint[] {\n    return [this.xs, this.s, this.m, this.l, this.xl]\n      .map((width: number, index: number) => ({size: breakpointKeys[index], width}))\n      .filter(size => !Number.isNaN(size.width))\n      .reverse();\n  }\n\n  private checkSize(width: number): void {\n    const newSize: TableSizes = this.breakpoints\n      .reduce((currentSize: TableBreakpointKeys, breakpoint: TableBreakpoint) =>\n        (width <= breakpoint.width) ? breakpoint.size : currentSize, 'full');\n\n    this.updateSizeClass(newSize);\n  }\n\n  private updateSizeClass(newSize: TableSizes): void {\n    if (newSize !== this.currentSize) {\n      this.removeSizeClass(this.currentSize);\n      this.currentSize = newSize;\n      if (this.isBreakpointKey(newSize)) {\n        this.addSizeClass(newSize);\n        this.soulTableSizeChange.emit(newSize);\n      } else {\n        this.soulTableFullSize.emit();\n      }\n    }\n  }\n\n  private addSizeClass(toAdd: TableBreakpointKeys): void {\n    this.tableSlot.assignedElements().forEach(slotted => slotted.classList.add(this.getClassForSize(toAdd)));\n  }\n\n  private removeSizeClass(toRemove: TableSizes): void {\n    if (this.isBreakpointKey(toRemove)) {\n      this.tableSlot.assignedElements().forEach(slotted => slotted.classList.remove(this.getClassForSize(toRemove)));\n    }\n  }\n\n  private getBreakpointsKeys(): TableBreakpointKeys[] {\n    return ['xs', 's', 'm', 'l', 'xl'];\n  }\n\n  private getClassForSize(breakpointKey: TableBreakpointKeys): string {\n    return 'soul-table--' + breakpointKey;\n  }\n\n  private isBreakpointKey(newSize: TableSizes): newSize is TableBreakpointKeys {\n    return this.getBreakpointsKeys().some(key => key === newSize);\n  }\n}\n\ninterface TableBreakpoint {\n  size: TableBreakpointKeys;\n  width: number;\n}\n\ntype TableSizes = 'xs' | 's' | 'm' | 'l' | 'xl' | 'full';\ntype TableBreakpointKeys = Exclude<TableSizes, 'full'>;\n\n"],"mappings":"gEAAA,MAAMA,EAAsB,qE,MCOfC,EAAgB,M,uIAcnBC,KAAAC,YAAiC,G,uFAIzCC,mBACEF,KAAKG,iBACLH,KAAKI,eAAiB,IAAIC,gBAAgBC,GAAmCN,KAAKO,UAAUD,EAAQ,GAAGE,YAAYC,SACnHT,KAAKI,eAAeM,QAAQV,KAAKW,Y,CAG5BC,uBACLZ,KAAKI,eAAeS,Y,CAQfC,WACLd,KAAKG,iBACLH,KAAKO,UAAUP,KAAKW,YAAYI,Y,CAGlCC,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,QAAME,IAAKC,GAAMpB,KAAKqB,UAAYD,I,CAKhCjB,iBACN,MAAMmB,EAAyCtB,KAAKuB,qBACpDvB,KAAKC,YAAcD,KAAKwB,gCAAgCF,E,CAGlDE,gCAAgCC,GACtC,MAAO,CAACzB,KAAK0B,GAAI1B,KAAK2B,EAAG3B,KAAK4B,EAAG5B,KAAK6B,EAAG7B,KAAK8B,IAC3CC,KAAI,CAACtB,EAAeuB,KAAa,CAAOC,KAAMR,EAAeO,GAAQvB,YACrEyB,QAAOD,IAASE,OAAOC,MAAMH,EAAKxB,SAClC4B,S,CAGG9B,UAAUE,GAChB,MAAM6B,EAAsBtC,KAAKC,YAC9BsC,QAAO,CAACC,EAAkCC,IACxChC,GAASgC,EAAWhC,MAASgC,EAAWR,KAAOO,GAAa,QAEjExC,KAAK0C,gBAAgBJ,E,CAGfI,gBAAgBJ,GACtB,GAAIA,IAAYtC,KAAKwC,YAAa,CAChCxC,KAAK2C,gBAAgB3C,KAAKwC,aAC1BxC,KAAKwC,YAAcF,EACnB,GAAItC,KAAK4C,gBAAgBN,GAAU,CACjCtC,KAAK6C,aAAaP,GAClBtC,KAAK8C,oBAAoBC,KAAKT,E,KACzB,CACLtC,KAAKgD,kBAAkBD,M,GAKrBF,aAAaI,GACnBjD,KAAKqB,UAAU6B,mBAAmBC,SAAQC,GAAWA,EAAQC,UAAUC,IAAItD,KAAKuD,gBAAgBN,K,CAG1FN,gBAAgBa,GACtB,GAAIxD,KAAK4C,gBAAgBY,GAAW,CAClCxD,KAAKqB,UAAU6B,mBAAmBC,SAAQC,GAAWA,EAAQC,UAAUI,OAAOzD,KAAKuD,gBAAgBC,K,EAI/FjC,qBACN,MAAO,CAAC,KAAM,IAAK,IAAK,IAAK,K,CAGvBgC,gBAAgBG,GACtB,MAAO,eAAiBA,C,CAGlBd,gBAAgBN,GACtB,OAAOtC,KAAKuB,qBAAqBoC,MAAKC,GAAOA,IAAQtB,G"}