/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface SoulAvatar {
        "accessibilityLabel": string;
        "additionalText": string;
        "chars": string;
        "color": 'auto' | 'primary' | 'neutral' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;
        "icon": string;
        "imageUrl": string;
        "muted": boolean;
        "name": string;
        "size": 's' | 'm' | 'l' | 'xl';
        "status"?: 'positive' | 'waiting' | 'locked' | 'warning';
        "statusMessage": string;
        "thumbnailOnly": boolean;
        "type": 'user' | 'entity';
    }
    interface SoulAvatarGroup {
        "maxVisibleAvatars": number;
        "size": 's' | 'm' | 'l' | 'xl';
    }
    interface SoulAvatarOption {
        "clone": () => Promise<HTMLSoulAvatarOptionElement>;
        "dataSelected": boolean;
        "disabled": boolean;
        "hidden": boolean;
        "highlighted": boolean;
        "instanceId": string;
        "match": (term: string) => Promise<boolean>;
        "nonFilterable": boolean;
        "passive": boolean;
        "selected": boolean;
        "value": any;
    }
    interface SoulBenefitModal {
        "close": () => Promise<void>;
        "closeButton": boolean;
        "closeWithEsc": boolean;
        "description": string;
        "heading": string;
        "open": boolean;
        "show": () => Promise<void>;
    }
    interface SoulEmptyState {
        "heading": string;
        "helpText": string;
        "size": 's' | 'm';
        "text": string;
    }
    interface SoulFileIcon {
        "format": string;
        "inline": boolean;
        "reference": boolean;
        "size": 's' | 'm' | 'l' | 'xl' | '2-xl' | '3-xl';
        "status": 'positive' | 'warning' | 'critical' | 'not-allowed' | 'waiting';
    }
    interface SoulIcon {
        "color": 'primary' | 'secondary' | 'reduced';
        "iconStackUrl": string;
        "inline": boolean;
        "name": string;
        "size": '2-xs' | 'xs' | 's' | 'm' | 'l' | 'xl' | '2-xl' | '3-xl';
    }
    interface SoulIndicator {
        "border": boolean;
        "inline": boolean;
        "size": 's' | 'm';
        "type": 'positive' | 'warning' | 'not-allowed' | 'critical' | 'info' | 'help' | 'waiting' | 'locked' | 'experimental';
    }
    interface SoulInputWrapper {
        "additionalLabel": string;
        "clearButton": boolean;
        "helpText": string;
        "inputOnly": boolean;
        "invalidStyle": boolean;
        "label": string;
        "status": 'warning' | 'critical';
        "statusMessage": string;
        "tooltipPosition": 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
    }
    interface SoulMarkdownContent {
        "scale": 's' | 'm' | 'l';
        "trustContent": boolean;
        "url": string;
        "value": string;
    }
    interface SoulModal {
        "close": () => Promise<void>;
        "closeButton": boolean;
        "closeWithEsc": boolean;
        "heading": string;
        "label": string;
        "open": boolean;
        "position": 'center' | 'side-right' | 'side-left';
        "show": () => Promise<void>;
        "size": 's' | 'm' | 'l' | 'xl';
        "type": 'neutral' | 'info' | 'warning' | 'critical';
    }
    interface SoulOptionGroup {
        "disabled"?: boolean;
        "hidden"?: boolean;
        "label": string;
    }
    interface SoulPrefetch {
        "components": string[];
        "delay": 0;
        "fetchComponents": () => Promise<void>;
        "fetchOnLoad": boolean;
    }
    interface SoulProgressBar {
        "color": 'neutral' | 'primary';
        "hideLabel": boolean;
        "indeterminate": boolean;
        "label": string;
        "max": number;
        "min": number;
        "progress": number;
        "status": 'warning' | 'positive' | 'critical';
    }
    interface SoulProgressRing {
        "accessibilityLabel": string;
        "color": 'neutral' | 'primary';
        "hideLabel": boolean;
        "indeterminate": boolean;
        "label": string;
        "max": number;
        "min": number;
        "progress": number;
        "size": 's' | 'm' | 'l';
        "status": 'warning' | 'positive' | 'critical';
    }
    interface SoulSelect {
        "additionalLabel"?: string;
        "disableSpaces": boolean;
        "disabled": boolean;
        "helpText"?: string;
        "inputOnly": boolean;
        "label"?: string;
        "maxHeight": string;
        "noOptionsMessage": string;
        "placeholder"?: string;
        "searchFunction": <K extends HTMLSoulTextOptionElement | HTMLSoulAvatarOptionElement>(option: K, term: string) => boolean;
        "searchable": boolean;
        "stateless": boolean;
        "status": 'warning' | 'critical';
        "statusMessage"?: string;
        "tooltipPosition": 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
    }
    interface SoulSkeletonKeyValue {
        "horizontal": boolean;
        "lines": number;
        "width": string;
    }
    interface SoulSkeletonLabel {
        "width": string;
    }
    interface SoulSkeletonTable {
        "columns": number;
        "rows": number;
        "withHeader": boolean;
    }
    interface SoulSkeletonText {
        "lines": number;
        "width": string;
    }
    interface SoulSkeletonThumbnail {
        "shape": 'circle' | 'square';
        "size": 's' | 'm' | 'l' | 'xl';
    }
    interface SoulTableWrapper {
        "l": number;
        "m": number;
        "s": number;
        "xl": number;
        "xs": number;
    }
    interface SoulTextOption {
        "additionalText": string;
        "clone": () => Promise<HTMLSoulTextOptionElement>;
        "dataSelected": boolean;
        "disabled": boolean;
        "hidden": boolean;
        "highlighted": boolean;
        "instanceId": string;
        "match": (term: string) => Promise<boolean>;
        "nonFilterable": boolean;
        "passive": boolean;
        "selected": boolean;
        "text": string;
        "value": any;
    }
    interface SoulTooltip {
        "position": 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
        "status": 'warning' | 'critical';
        "text": string;
        "triggerElement": HTMLElement;
        "triggerId": string;
    }
}
export interface SoulAvatarOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSoulAvatarOptionElement;
}
export interface SoulBenefitModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSoulBenefitModalElement;
}
export interface SoulInputWrapperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSoulInputWrapperElement;
}
export interface SoulMarkdownContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSoulMarkdownContentElement;
}
export interface SoulModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSoulModalElement;
}
export interface SoulSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSoulSelectElement;
}
export interface SoulTableWrapperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSoulTableWrapperElement;
}
export interface SoulTextOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSoulTextOptionElement;
}
declare global {
    interface HTMLSoulAvatarElement extends Components.SoulAvatar, HTMLStencilElement {
    }
    var HTMLSoulAvatarElement: {
        prototype: HTMLSoulAvatarElement;
        new (): HTMLSoulAvatarElement;
    };
    interface HTMLSoulAvatarGroupElement extends Components.SoulAvatarGroup, HTMLStencilElement {
    }
    var HTMLSoulAvatarGroupElement: {
        prototype: HTMLSoulAvatarGroupElement;
        new (): HTMLSoulAvatarGroupElement;
    };
    interface HTMLSoulAvatarOptionElement extends Components.SoulAvatarOption, HTMLStencilElement {
    }
    var HTMLSoulAvatarOptionElement: {
        prototype: HTMLSoulAvatarOptionElement;
        new (): HTMLSoulAvatarOptionElement;
    };
    interface HTMLSoulBenefitModalElement extends Components.SoulBenefitModal, HTMLStencilElement {
    }
    var HTMLSoulBenefitModalElement: {
        prototype: HTMLSoulBenefitModalElement;
        new (): HTMLSoulBenefitModalElement;
    };
    interface HTMLSoulEmptyStateElement extends Components.SoulEmptyState, HTMLStencilElement {
    }
    var HTMLSoulEmptyStateElement: {
        prototype: HTMLSoulEmptyStateElement;
        new (): HTMLSoulEmptyStateElement;
    };
    interface HTMLSoulFileIconElement extends Components.SoulFileIcon, HTMLStencilElement {
    }
    var HTMLSoulFileIconElement: {
        prototype: HTMLSoulFileIconElement;
        new (): HTMLSoulFileIconElement;
    };
    interface HTMLSoulIconElement extends Components.SoulIcon, HTMLStencilElement {
    }
    var HTMLSoulIconElement: {
        prototype: HTMLSoulIconElement;
        new (): HTMLSoulIconElement;
    };
    interface HTMLSoulIndicatorElement extends Components.SoulIndicator, HTMLStencilElement {
    }
    var HTMLSoulIndicatorElement: {
        prototype: HTMLSoulIndicatorElement;
        new (): HTMLSoulIndicatorElement;
    };
    interface HTMLSoulInputWrapperElement extends Components.SoulInputWrapper, HTMLStencilElement {
    }
    var HTMLSoulInputWrapperElement: {
        prototype: HTMLSoulInputWrapperElement;
        new (): HTMLSoulInputWrapperElement;
    };
    interface HTMLSoulMarkdownContentElement extends Components.SoulMarkdownContent, HTMLStencilElement {
    }
    var HTMLSoulMarkdownContentElement: {
        prototype: HTMLSoulMarkdownContentElement;
        new (): HTMLSoulMarkdownContentElement;
    };
    interface HTMLSoulModalElement extends Components.SoulModal, HTMLStencilElement {
    }
    var HTMLSoulModalElement: {
        prototype: HTMLSoulModalElement;
        new (): HTMLSoulModalElement;
    };
    interface HTMLSoulOptionGroupElement extends Components.SoulOptionGroup, HTMLStencilElement {
    }
    var HTMLSoulOptionGroupElement: {
        prototype: HTMLSoulOptionGroupElement;
        new (): HTMLSoulOptionGroupElement;
    };
    interface HTMLSoulPrefetchElement extends Components.SoulPrefetch, HTMLStencilElement {
    }
    var HTMLSoulPrefetchElement: {
        prototype: HTMLSoulPrefetchElement;
        new (): HTMLSoulPrefetchElement;
    };
    interface HTMLSoulProgressBarElement extends Components.SoulProgressBar, HTMLStencilElement {
    }
    var HTMLSoulProgressBarElement: {
        prototype: HTMLSoulProgressBarElement;
        new (): HTMLSoulProgressBarElement;
    };
    interface HTMLSoulProgressRingElement extends Components.SoulProgressRing, HTMLStencilElement {
    }
    var HTMLSoulProgressRingElement: {
        prototype: HTMLSoulProgressRingElement;
        new (): HTMLSoulProgressRingElement;
    };
    interface HTMLSoulSelectElement extends Components.SoulSelect, HTMLStencilElement {
    }
    var HTMLSoulSelectElement: {
        prototype: HTMLSoulSelectElement;
        new (): HTMLSoulSelectElement;
    };
    interface HTMLSoulSkeletonKeyValueElement extends Components.SoulSkeletonKeyValue, HTMLStencilElement {
    }
    var HTMLSoulSkeletonKeyValueElement: {
        prototype: HTMLSoulSkeletonKeyValueElement;
        new (): HTMLSoulSkeletonKeyValueElement;
    };
    interface HTMLSoulSkeletonLabelElement extends Components.SoulSkeletonLabel, HTMLStencilElement {
    }
    var HTMLSoulSkeletonLabelElement: {
        prototype: HTMLSoulSkeletonLabelElement;
        new (): HTMLSoulSkeletonLabelElement;
    };
    interface HTMLSoulSkeletonTableElement extends Components.SoulSkeletonTable, HTMLStencilElement {
    }
    var HTMLSoulSkeletonTableElement: {
        prototype: HTMLSoulSkeletonTableElement;
        new (): HTMLSoulSkeletonTableElement;
    };
    interface HTMLSoulSkeletonTextElement extends Components.SoulSkeletonText, HTMLStencilElement {
    }
    var HTMLSoulSkeletonTextElement: {
        prototype: HTMLSoulSkeletonTextElement;
        new (): HTMLSoulSkeletonTextElement;
    };
    interface HTMLSoulSkeletonThumbnailElement extends Components.SoulSkeletonThumbnail, HTMLStencilElement {
    }
    var HTMLSoulSkeletonThumbnailElement: {
        prototype: HTMLSoulSkeletonThumbnailElement;
        new (): HTMLSoulSkeletonThumbnailElement;
    };
    interface HTMLSoulTableWrapperElement extends Components.SoulTableWrapper, HTMLStencilElement {
    }
    var HTMLSoulTableWrapperElement: {
        prototype: HTMLSoulTableWrapperElement;
        new (): HTMLSoulTableWrapperElement;
    };
    interface HTMLSoulTextOptionElement extends Components.SoulTextOption, HTMLStencilElement {
    }
    var HTMLSoulTextOptionElement: {
        prototype: HTMLSoulTextOptionElement;
        new (): HTMLSoulTextOptionElement;
    };
    interface HTMLSoulTooltipElement extends Components.SoulTooltip, HTMLStencilElement {
    }
    var HTMLSoulTooltipElement: {
        prototype: HTMLSoulTooltipElement;
        new (): HTMLSoulTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "soul-avatar": HTMLSoulAvatarElement;
        "soul-avatar-group": HTMLSoulAvatarGroupElement;
        "soul-avatar-option": HTMLSoulAvatarOptionElement;
        "soul-benefit-modal": HTMLSoulBenefitModalElement;
        "soul-empty-state": HTMLSoulEmptyStateElement;
        "soul-file-icon": HTMLSoulFileIconElement;
        "soul-icon": HTMLSoulIconElement;
        "soul-indicator": HTMLSoulIndicatorElement;
        "soul-input-wrapper": HTMLSoulInputWrapperElement;
        "soul-markdown-content": HTMLSoulMarkdownContentElement;
        "soul-modal": HTMLSoulModalElement;
        "soul-option-group": HTMLSoulOptionGroupElement;
        "soul-prefetch": HTMLSoulPrefetchElement;
        "soul-progress-bar": HTMLSoulProgressBarElement;
        "soul-progress-ring": HTMLSoulProgressRingElement;
        "soul-select": HTMLSoulSelectElement;
        "soul-skeleton-key-value": HTMLSoulSkeletonKeyValueElement;
        "soul-skeleton-label": HTMLSoulSkeletonLabelElement;
        "soul-skeleton-table": HTMLSoulSkeletonTableElement;
        "soul-skeleton-text": HTMLSoulSkeletonTextElement;
        "soul-skeleton-thumbnail": HTMLSoulSkeletonThumbnailElement;
        "soul-table-wrapper": HTMLSoulTableWrapperElement;
        "soul-text-option": HTMLSoulTextOptionElement;
        "soul-tooltip": HTMLSoulTooltipElement;
    }
}
declare namespace LocalJSX {
    interface SoulAvatar {
        "accessibilityLabel"?: string;
        "additionalText"?: string;
        "chars"?: string;
        "color"?: 'auto' | 'primary' | 'neutral' | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;
        "icon"?: string;
        "imageUrl"?: string;
        "muted"?: boolean;
        "name"?: string;
        "size"?: 's' | 'm' | 'l' | 'xl';
        "status"?: 'positive' | 'waiting' | 'locked' | 'warning';
        "statusMessage"?: string;
        "thumbnailOnly"?: boolean;
        "type"?: 'user' | 'entity';
    }
    interface SoulAvatarGroup {
        "maxVisibleAvatars"?: number;
        "size"?: 's' | 'm' | 'l' | 'xl';
    }
    interface SoulAvatarOption {
        "dataSelected"?: boolean;
        "disabled"?: boolean;
        "hidden"?: boolean;
        "highlighted"?: boolean;
        "instanceId"?: string;
        "nonFilterable"?: boolean;
        "onSoulOptionChange"?: (event: SoulAvatarOptionCustomEvent<SoulAvatarOption>) => void;
        "onSoulOptionClick"?: (event: SoulAvatarOptionCustomEvent<SoulAvatarOption>) => void;
        "onSoulOptionHover"?: (event: SoulAvatarOptionCustomEvent<SoulAvatarOption>) => void;
        "onSoulOptionSelectChange"?: (event: SoulAvatarOptionCustomEvent<SoulAvatarOption>) => void;
        "passive"?: boolean;
        "selected"?: boolean;
        "value"?: any;
    }
    interface SoulBenefitModal {
        "closeButton"?: boolean;
        "closeWithEsc"?: boolean;
        "description"?: string;
        "heading"?: string;
        "onSoulClose"?: (event: SoulBenefitModalCustomEvent<void>) => void;
        "open"?: boolean;
    }
    interface SoulEmptyState {
        "heading"?: string;
        "helpText"?: string;
        "size"?: 's' | 'm';
        "text"?: string;
    }
    interface SoulFileIcon {
        "format"?: string;
        "inline"?: boolean;
        "reference"?: boolean;
        "size"?: 's' | 'm' | 'l' | 'xl' | '2-xl' | '3-xl';
        "status"?: 'positive' | 'warning' | 'critical' | 'not-allowed' | 'waiting';
    }
    interface SoulIcon {
        "color"?: 'primary' | 'secondary' | 'reduced';
        "iconStackUrl"?: string;
        "inline"?: boolean;
        "name"?: string;
        "size"?: '2-xs' | 'xs' | 's' | 'm' | 'l' | 'xl' | '2-xl' | '3-xl';
    }
    interface SoulIndicator {
        "border"?: boolean;
        "inline"?: boolean;
        "size"?: 's' | 'm';
        "type"?: 'positive' | 'warning' | 'not-allowed' | 'critical' | 'info' | 'help' | 'waiting' | 'locked' | 'experimental';
    }
    interface SoulInputWrapper {
        "additionalLabel"?: string;
        "clearButton"?: boolean;
        "helpText"?: string;
        "inputOnly"?: boolean;
        "invalidStyle"?: boolean;
        "label"?: string;
        "onSoulClear"?: (event: SoulInputWrapperCustomEvent<void>) => void;
        "status"?: 'warning' | 'critical';
        "statusMessage"?: string;
        "tooltipPosition"?: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
    }
    interface SoulMarkdownContent {
        "onSoulMarkdownConverted"?: (event: SoulMarkdownContentCustomEvent<string>) => void;
        "scale"?: 's' | 'm' | 'l';
        "trustContent"?: boolean;
        "url"?: string;
        "value"?: string;
    }
    interface SoulModal {
        "closeButton"?: boolean;
        "closeWithEsc"?: boolean;
        "heading"?: string;
        "label"?: string;
        "onSoulClose"?: (event: SoulModalCustomEvent<void>) => void;
        "open"?: boolean;
        "position"?: 'center' | 'side-right' | 'side-left';
        "size"?: 's' | 'm' | 'l' | 'xl';
        "type"?: 'neutral' | 'info' | 'warning' | 'critical';
    }
    interface SoulOptionGroup {
        "disabled"?: boolean;
        "hidden"?: boolean;
        "label"?: string;
    }
    interface SoulPrefetch {
        "components"?: string[];
        "delay"?: 0;
        "fetchOnLoad"?: boolean;
    }
    interface SoulProgressBar {
        "color"?: 'neutral' | 'primary';
        "hideLabel"?: boolean;
        "indeterminate"?: boolean;
        "label"?: string;
        "max"?: number;
        "min"?: number;
        "progress"?: number;
        "status"?: 'warning' | 'positive' | 'critical';
    }
    interface SoulProgressRing {
        "accessibilityLabel"?: string;
        "color"?: 'neutral' | 'primary';
        "hideLabel"?: boolean;
        "indeterminate"?: boolean;
        "label"?: string;
        "max"?: number;
        "min"?: number;
        "progress"?: number;
        "size"?: 's' | 'm' | 'l';
        "status"?: 'warning' | 'positive' | 'critical';
    }
    interface SoulSelect {
        "additionalLabel"?: string;
        "disableSpaces"?: boolean;
        "disabled"?: boolean;
        "helpText"?: string;
        "inputOnly"?: boolean;
        "label"?: string;
        "maxHeight"?: string;
        "noOptionsMessage"?: string;
        "onSoulOptionSelect"?: (event: SoulSelectCustomEvent<any>) => void;
        "onSoulSearch"?: (event: SoulSelectCustomEvent<SoulSelectSearchEvent>) => void;
        "placeholder"?: string;
        "searchFunction"?: <K extends HTMLSoulTextOptionElement | HTMLSoulAvatarOptionElement>(option: K, term: string) => boolean;
        "searchable"?: boolean;
        "stateless"?: boolean;
        "status"?: 'warning' | 'critical';
        "statusMessage"?: string;
        "tooltipPosition"?: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
    }
    interface SoulSkeletonKeyValue {
        "horizontal"?: boolean;
        "lines"?: number;
        "width"?: string;
    }
    interface SoulSkeletonLabel {
        "width"?: string;
    }
    interface SoulSkeletonTable {
        "columns"?: number;
        "rows"?: number;
        "withHeader"?: boolean;
    }
    interface SoulSkeletonText {
        "lines"?: number;
        "width"?: string;
    }
    interface SoulSkeletonThumbnail {
        "shape"?: 'circle' | 'square';
        "size"?: 's' | 'm' | 'l' | 'xl';
    }
    interface SoulTableWrapper {
        "l"?: number;
        "m"?: number;
        "onSoulTableFullSize"?: (event: SoulTableWrapperCustomEvent<void>) => void;
        "onSoulTableSizeChange"?: (event: SoulTableWrapperCustomEvent<'xs' | 's' | 'm' | 'l' | 'xl'>) => void;
        "s"?: number;
        "xl"?: number;
        "xs"?: number;
    }
    interface SoulTextOption {
        "additionalText"?: string;
        "dataSelected"?: boolean;
        "disabled"?: boolean;
        "hidden"?: boolean;
        "highlighted"?: boolean;
        "instanceId"?: string;
        "nonFilterable"?: boolean;
        "onSoulOptionChange"?: (event: SoulTextOptionCustomEvent<SoulTextOption>) => void;
        "onSoulOptionClick"?: (event: SoulTextOptionCustomEvent<SoulTextOption>) => void;
        "onSoulOptionHover"?: (event: SoulTextOptionCustomEvent<SoulTextOption>) => void;
        "onSoulOptionSelectChange"?: (event: SoulTextOptionCustomEvent<SoulTextOption>) => void;
        "passive"?: boolean;
        "selected"?: boolean;
        "text"?: string;
        "value"?: any;
    }
    interface SoulTooltip {
        "position"?: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
        "status"?: 'warning' | 'critical';
        "text"?: string;
        "triggerElement"?: HTMLElement;
        "triggerId"?: string;
    }
    interface IntrinsicElements {
        "soul-avatar": SoulAvatar;
        "soul-avatar-group": SoulAvatarGroup;
        "soul-avatar-option": SoulAvatarOption;
        "soul-benefit-modal": SoulBenefitModal;
        "soul-empty-state": SoulEmptyState;
        "soul-file-icon": SoulFileIcon;
        "soul-icon": SoulIcon;
        "soul-indicator": SoulIndicator;
        "soul-input-wrapper": SoulInputWrapper;
        "soul-markdown-content": SoulMarkdownContent;
        "soul-modal": SoulModal;
        "soul-option-group": SoulOptionGroup;
        "soul-prefetch": SoulPrefetch;
        "soul-progress-bar": SoulProgressBar;
        "soul-progress-ring": SoulProgressRing;
        "soul-select": SoulSelect;
        "soul-skeleton-key-value": SoulSkeletonKeyValue;
        "soul-skeleton-label": SoulSkeletonLabel;
        "soul-skeleton-table": SoulSkeletonTable;
        "soul-skeleton-text": SoulSkeletonText;
        "soul-skeleton-thumbnail": SoulSkeletonThumbnail;
        "soul-table-wrapper": SoulTableWrapper;
        "soul-text-option": SoulTextOption;
        "soul-tooltip": SoulTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "soul-avatar": LocalJSX.SoulAvatar & JSXBase.HTMLAttributes<HTMLSoulAvatarElement>;
            "soul-avatar-group": LocalJSX.SoulAvatarGroup & JSXBase.HTMLAttributes<HTMLSoulAvatarGroupElement>;
            "soul-avatar-option": LocalJSX.SoulAvatarOption & JSXBase.HTMLAttributes<HTMLSoulAvatarOptionElement>;
            "soul-benefit-modal": LocalJSX.SoulBenefitModal & JSXBase.HTMLAttributes<HTMLSoulBenefitModalElement>;
            "soul-empty-state": LocalJSX.SoulEmptyState & JSXBase.HTMLAttributes<HTMLSoulEmptyStateElement>;
            "soul-file-icon": LocalJSX.SoulFileIcon & JSXBase.HTMLAttributes<HTMLSoulFileIconElement>;
            "soul-icon": LocalJSX.SoulIcon & JSXBase.HTMLAttributes<HTMLSoulIconElement>;
            "soul-indicator": LocalJSX.SoulIndicator & JSXBase.HTMLAttributes<HTMLSoulIndicatorElement>;
            "soul-input-wrapper": LocalJSX.SoulInputWrapper & JSXBase.HTMLAttributes<HTMLSoulInputWrapperElement>;
            "soul-markdown-content": LocalJSX.SoulMarkdownContent & JSXBase.HTMLAttributes<HTMLSoulMarkdownContentElement>;
            "soul-modal": LocalJSX.SoulModal & JSXBase.HTMLAttributes<HTMLSoulModalElement>;
            "soul-option-group": LocalJSX.SoulOptionGroup & JSXBase.HTMLAttributes<HTMLSoulOptionGroupElement>;
            "soul-prefetch": LocalJSX.SoulPrefetch & JSXBase.HTMLAttributes<HTMLSoulPrefetchElement>;
            "soul-progress-bar": LocalJSX.SoulProgressBar & JSXBase.HTMLAttributes<HTMLSoulProgressBarElement>;
            "soul-progress-ring": LocalJSX.SoulProgressRing & JSXBase.HTMLAttributes<HTMLSoulProgressRingElement>;
            "soul-select": LocalJSX.SoulSelect & JSXBase.HTMLAttributes<HTMLSoulSelectElement>;
            "soul-skeleton-key-value": LocalJSX.SoulSkeletonKeyValue & JSXBase.HTMLAttributes<HTMLSoulSkeletonKeyValueElement>;
            "soul-skeleton-label": LocalJSX.SoulSkeletonLabel & JSXBase.HTMLAttributes<HTMLSoulSkeletonLabelElement>;
            "soul-skeleton-table": LocalJSX.SoulSkeletonTable & JSXBase.HTMLAttributes<HTMLSoulSkeletonTableElement>;
            "soul-skeleton-text": LocalJSX.SoulSkeletonText & JSXBase.HTMLAttributes<HTMLSoulSkeletonTextElement>;
            "soul-skeleton-thumbnail": LocalJSX.SoulSkeletonThumbnail & JSXBase.HTMLAttributes<HTMLSoulSkeletonThumbnailElement>;
            "soul-table-wrapper": LocalJSX.SoulTableWrapper & JSXBase.HTMLAttributes<HTMLSoulTableWrapperElement>;
            "soul-text-option": LocalJSX.SoulTextOption & JSXBase.HTMLAttributes<HTMLSoulTextOptionElement>;
            "soul-tooltip": LocalJSX.SoulTooltip & JSXBase.HTMLAttributes<HTMLSoulTooltipElement>;
        }
    }
}
