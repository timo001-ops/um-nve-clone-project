import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { Components } from '../../components';
import SoulTextOption = Components.SoulTextOption;
import SoulAvatarOption = Components.SoulAvatarOption;
export declare class SoulSelect implements ComponentInterface {
  additionalLabel?: string;
  disabled: boolean;
  disableSpaces: boolean;
  helpText?: string;
  inputOnly: boolean;
  label?: string;
  maxHeight: string;
  noOptionsMessage: string;
  placeholder?: string;
  searchable: boolean;
  stateless: boolean;
  status: 'warning' | 'critical';
  statusMessage?: string;
  tooltipPosition: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
  searchFunction: <K extends HTMLSoulTextOptionElement | HTMLSoulAvatarOptionElement>(option: K, term: string) => boolean;
  host: HTMLElement;
  soulOptionSelect: EventEmitter<any>;
  soulSearch: EventEmitter<SoulSelectSearchEvent>;
  private showEmptyOptionMessage;
  private actionElement;
  private inputElement;
  private selectionElement;
  private optionCloneElement;
  private optionsElement;
  private optionListElement;
  private placeholderElement;
  private selectElement;
  private tooltipElement;
  private supportedStatuses;
  private optionHeightObserver;
  private highlightedIndex;
  private isPopoverVisible;
  private readonly instanceId;
  private popoverHelper;
  constructor();
  componentDidRender(): void;
  disconnectedCallback(): void;
  onOptionChange(event: CustomEvent<SoulOption>): Promise<void>;
  onOptionHover(event: CustomEvent<SoulOption>): void;
  onSoulClick(event: CustomEvent<SoulOption>): Promise<void>;
  onOptionSelectChange(event: CustomEvent<SoulOption>): Promise<void>;
  private doOnSelectChange;
  onDisabledChange(): void;
  onKeyUp(keyboardEvent: KeyboardEvent): Promise<void>;
  render(): any;
  get shouldRenderTooltip(): boolean;
  get shouldRenderStatusMessage(): boolean;
  private get isStatusValid();
  private renderTooltip;
  private getMatchingOptions;
  private highlightNotFilteredOption;
  private isOptionFiltered;
  private highlightFirstNotFilteredOption;
  private setFilterDataAttributes;
  private onKeyDown;
  private selectOption;
  private resetSearch;
  private areAllOptionsDeselected;
  private resetHighlight;
  private updateSelectedOptionClone;
  private emptyElement;
  private deselectOtherOptions;
  private openOrElse;
  private togglePopover;
  private setPlaceholderElementHeight;
  private onSpaceKeyDown;
  private setHighlightedOptionIndex;
  private removeCurrentOptionHighlight;
  private isLastOptionHighlighted;
  private isFirstOptionHighlighted;
  private highlightOptionByIndex;
  private highlightPreviousOption;
  private highlightNextOption;
  private scrollUpToOption;
  private scrollDownToOption;
  private isHighlightedOptionVisible;
  private getOptions;
  private selectHighlightedOption;
  private scrollToHighlightedOption;
  private getPreviousIndex;
  private getNextIndex;
  private setActionSlotVisibility;
  private resizePlaceholderElement;
  private isOptionDisabled;
  private isOptionHidden;
  private isOptionUsable;
  private setTooltipTriggerElement;
}
type HTMLSoulOption = HTMLSoulTextOptionElement | HTMLSoulAvatarOptionElement;
type SoulOption = SoulTextOption | SoulAvatarOption;
type SoulSelectSearchEvent = {
  searchTerm: string;
  matches: number;
  matchingOptions: HTMLSoulOption[];
};
export {};
